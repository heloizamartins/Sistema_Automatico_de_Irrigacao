
ADC_DMA_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002268  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002374  08002374  00012374  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080023ac  080023ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080023b0  080023b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080023b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b0  2000000c  080023c0  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001bc  080023c0  000201bc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017b2e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000312f  00000000  00000000  00037b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007641  00000000  00000000  0003ac92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ab8  00000000  00000000  000422d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000df0  00000000  00000000  00042d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006925  00000000  00000000  00043b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003e35  00000000  00000000  0004a4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004e2da  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ec0  00000000  00000000  0004e358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800235c 	.word	0x0800235c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800235c 	.word	0x0800235c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fba6 	bl	80008b4 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 fb5c 	bl	8000834 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fb35 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 ff20 	bl	8001ff0 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000002c 	.word	0x2000002c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000200:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000202:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000206:	f012 0f50 	tst.w	r2, #80	; 0x50
 800020a:	d11b      	bne.n	8000244 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800020c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800020e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000212:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	6892      	ldr	r2, [r2, #8]
 8000218:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800021c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000220:	d10c      	bne.n	800023c <ADC_DMAConvCplt+0x3c>
 8000222:	68da      	ldr	r2, [r3, #12]
 8000224:	b952      	cbnz	r2, 800023c <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800022c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800022e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000230:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000232:	bf5e      	ittt	pl
 8000234:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000236:	f042 0201 	orrpl.w	r2, r2, #1
 800023a:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800023c:	4618      	mov	r0, r3
 800023e:	f001 fceb 	bl	8001c18 <HAL_ADC_ConvCpltCallback>
 8000242:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000244:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024c:	4718      	bx	r3

0800024e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800024e:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000250:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000252:	f001 fcd5 	bl	8001c00 <HAL_ADC_ConvHalfCpltCallback>
 8000256:	bd08      	pop	{r3, pc}

08000258 <HAL_ADC_LevelOutOfWindowCallback>:
 8000258:	4770      	bx	lr

0800025a <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800025a:	6803      	ldr	r3, [r0, #0]
{
 800025c:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800025e:	685a      	ldr	r2, [r3, #4]
{
 8000260:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000262:	0690      	lsls	r0, r2, #26
 8000264:	d527      	bpl.n	80002b6 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	0791      	lsls	r1, r2, #30
 800026a:	d524      	bpl.n	80002b6 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800026c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800026e:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000270:	bf5e      	ittt	pl
 8000272:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000274:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000278:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800027a:	689a      	ldr	r2, [r3, #8]
 800027c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000280:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000284:	d110      	bne.n	80002a8 <HAL_ADC_IRQHandler+0x4e>
 8000286:	68e2      	ldr	r2, [r4, #12]
 8000288:	b972      	cbnz	r2, 80002a8 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800028a:	685a      	ldr	r2, [r3, #4]
 800028c:	f022 0220 	bic.w	r2, r2, #32
 8000290:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000292:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000298:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800029a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800029c:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800029e:	bf5e      	ittt	pl
 80002a0:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80002a2:	f043 0301 	orrpl.w	r3, r3, #1
 80002a6:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 80002a8:	4620      	mov	r0, r4
 80002aa:	f001 fcb5 	bl	8001c18 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80002ae:	f06f 0212 	mvn.w	r2, #18
 80002b2:	6823      	ldr	r3, [r4, #0]
 80002b4:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80002b6:	6823      	ldr	r3, [r4, #0]
 80002b8:	685a      	ldr	r2, [r3, #4]
 80002ba:	0610      	lsls	r0, r2, #24
 80002bc:	d530      	bpl.n	8000320 <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	0751      	lsls	r1, r2, #29
 80002c2:	d52d      	bpl.n	8000320 <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002c6:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80002c8:	bf5e      	ittt	pl
 80002ca:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80002cc:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80002d0:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002d2:	689a      	ldr	r2, [r3, #8]
 80002d4:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80002d8:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80002dc:	d00a      	beq.n	80002f4 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002de:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002e0:	0550      	lsls	r0, r2, #21
 80002e2:	d416      	bmi.n	8000312 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002e4:	689a      	ldr	r2, [r3, #8]
 80002e6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002ea:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80002ee:	d110      	bne.n	8000312 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002f0:	68e2      	ldr	r2, [r4, #12]
 80002f2:	b972      	cbnz	r2, 8000312 <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80002f4:	685a      	ldr	r2, [r3, #4]
 80002f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80002fa:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80002fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000302:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000304:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000306:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000308:	bf5e      	ittt	pl
 800030a:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800030c:	f043 0301 	orrpl.w	r3, r3, #1
 8000310:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000312:	4620      	mov	r0, r4
 8000314:	f000 fa7a 	bl	800080c <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000318:	f06f 020c 	mvn.w	r2, #12
 800031c:	6823      	ldr	r3, [r4, #0]
 800031e:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000320:	6823      	ldr	r3, [r4, #0]
 8000322:	685a      	ldr	r2, [r3, #4]
 8000324:	0652      	lsls	r2, r2, #25
 8000326:	d50d      	bpl.n	8000344 <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	07db      	lsls	r3, r3, #31
 800032c:	d50a      	bpl.n	8000344 <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800032e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000330:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000336:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000338:	f7ff ff8e 	bl	8000258 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800033c:	f06f 0201 	mvn.w	r2, #1
 8000340:	6823      	ldr	r3, [r4, #0]
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	bd10      	pop	{r4, pc}

08000346 <HAL_ADC_ErrorCallback>:
{
 8000346:	4770      	bx	lr

08000348 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000348:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800034a:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800034c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800034e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000352:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000354:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800035c:	f7ff fff3 	bl	8000346 <HAL_ADC_ErrorCallback>
 8000360:	bd08      	pop	{r3, pc}
	...

08000364 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000364:	2300      	movs	r3, #0
{ 
 8000366:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000368:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800036a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800036e:	2b01      	cmp	r3, #1
 8000370:	d074      	beq.n	800045c <HAL_ADC_ConfigChannel+0xf8>
 8000372:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000374:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000376:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800037a:	2d06      	cmp	r5, #6
 800037c:	6802      	ldr	r2, [r0, #0]
 800037e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000382:	680c      	ldr	r4, [r1, #0]
 8000384:	d825      	bhi.n	80003d2 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000386:	442b      	add	r3, r5
 8000388:	251f      	movs	r5, #31
 800038a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800038c:	3b05      	subs	r3, #5
 800038e:	409d      	lsls	r5, r3
 8000390:	ea26 0505 	bic.w	r5, r6, r5
 8000394:	fa04 f303 	lsl.w	r3, r4, r3
 8000398:	432b      	orrs	r3, r5
 800039a:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800039c:	2c09      	cmp	r4, #9
 800039e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 80003a2:	688d      	ldr	r5, [r1, #8]
 80003a4:	d92f      	bls.n	8000406 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80003a6:	2607      	movs	r6, #7
 80003a8:	4423      	add	r3, r4
 80003aa:	68d1      	ldr	r1, [r2, #12]
 80003ac:	3b1e      	subs	r3, #30
 80003ae:	409e      	lsls	r6, r3
 80003b0:	ea21 0106 	bic.w	r1, r1, r6
 80003b4:	fa05 f303 	lsl.w	r3, r5, r3
 80003b8:	430b      	orrs	r3, r1
 80003ba:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80003bc:	f1a4 0310 	sub.w	r3, r4, #16
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d92b      	bls.n	800041c <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003c4:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80003c6:	2200      	movs	r2, #0
 80003c8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	b002      	add	sp, #8
 80003d0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80003d2:	2d0c      	cmp	r5, #12
 80003d4:	d80b      	bhi.n	80003ee <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80003d6:	442b      	add	r3, r5
 80003d8:	251f      	movs	r5, #31
 80003da:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80003dc:	3b23      	subs	r3, #35	; 0x23
 80003de:	409d      	lsls	r5, r3
 80003e0:	ea26 0505 	bic.w	r5, r6, r5
 80003e4:	fa04 f303 	lsl.w	r3, r4, r3
 80003e8:	432b      	orrs	r3, r5
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
 80003ec:	e7d6      	b.n	800039c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003ee:	442b      	add	r3, r5
 80003f0:	251f      	movs	r5, #31
 80003f2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80003f4:	3b41      	subs	r3, #65	; 0x41
 80003f6:	409d      	lsls	r5, r3
 80003f8:	ea26 0505 	bic.w	r5, r6, r5
 80003fc:	fa04 f303 	lsl.w	r3, r4, r3
 8000400:	432b      	orrs	r3, r5
 8000402:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000404:	e7ca      	b.n	800039c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000406:	2607      	movs	r6, #7
 8000408:	6911      	ldr	r1, [r2, #16]
 800040a:	4423      	add	r3, r4
 800040c:	409e      	lsls	r6, r3
 800040e:	ea21 0106 	bic.w	r1, r1, r6
 8000412:	fa05 f303 	lsl.w	r3, r5, r3
 8000416:	430b      	orrs	r3, r1
 8000418:	6113      	str	r3, [r2, #16]
 800041a:	e7cf      	b.n	80003bc <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <HAL_ADC_ConfigChannel+0xfc>)
 800041e:	429a      	cmp	r2, r3
 8000420:	d116      	bne.n	8000450 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000422:	6893      	ldr	r3, [r2, #8]
 8000424:	021b      	lsls	r3, r3, #8
 8000426:	d4cd      	bmi.n	80003c4 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000428:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800042a:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800042c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000430:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000432:	d1c7      	bne.n	80003c4 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <HAL_ADC_ConfigChannel+0x100>)
 8000436:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <HAL_ADC_ConfigChannel+0x104>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	fbb3 f2f2 	udiv	r2, r3, r2
 800043e:	230a      	movs	r3, #10
 8000440:	4353      	muls	r3, r2
            wait_loop_index--;
 8000442:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000444:	9b01      	ldr	r3, [sp, #4]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d0bc      	beq.n	80003c4 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800044a:	9b01      	ldr	r3, [sp, #4]
 800044c:	3b01      	subs	r3, #1
 800044e:	e7f8      	b.n	8000442 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000450:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000452:	f043 0320 	orr.w	r3, r3, #32
 8000456:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000458:	2301      	movs	r3, #1
 800045a:	e7b4      	b.n	80003c6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800045c:	2302      	movs	r3, #2
 800045e:	e7b5      	b.n	80003cc <HAL_ADC_ConfigChannel+0x68>
 8000460:	40012400 	.word	0x40012400
 8000464:	20000008 	.word	0x20000008
 8000468:	000f4240 	.word	0x000f4240

0800046c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800046c:	2300      	movs	r3, #0
{
 800046e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000470:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000472:	6803      	ldr	r3, [r0, #0]
{
 8000474:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	07d2      	lsls	r2, r2, #31
 800047a:	d502      	bpl.n	8000482 <ADC_Enable+0x16>
  return HAL_OK;
 800047c:	2000      	movs	r0, #0
}
 800047e:	b002      	add	sp, #8
 8000480:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000482:	689a      	ldr	r2, [r3, #8]
 8000484:	f042 0201 	orr.w	r2, r2, #1
 8000488:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <ADC_Enable+0x68>)
 800048c:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <ADC_Enable+0x6c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000494:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000496:	9b01      	ldr	r3, [sp, #4]
 8000498:	b9c3      	cbnz	r3, 80004cc <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800049a:	f7ff fe99 	bl	80001d0 <HAL_GetTick>
 800049e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80004a0:	6823      	ldr	r3, [r4, #0]
 80004a2:	689d      	ldr	r5, [r3, #8]
 80004a4:	f015 0501 	ands.w	r5, r5, #1
 80004a8:	d1e8      	bne.n	800047c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80004aa:	f7ff fe91 	bl	80001d0 <HAL_GetTick>
 80004ae:	1b80      	subs	r0, r0, r6
 80004b0:	2802      	cmp	r0, #2
 80004b2:	d9f5      	bls.n	80004a0 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80004b6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004ba:	f043 0310 	orr.w	r3, r3, #16
 80004be:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80004c2:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004ca:	e7d8      	b.n	800047e <ADC_Enable+0x12>
      wait_loop_index--;
 80004cc:	9b01      	ldr	r3, [sp, #4]
 80004ce:	3b01      	subs	r3, #1
 80004d0:	e7e0      	b.n	8000494 <ADC_Enable+0x28>
 80004d2:	bf00      	nop
 80004d4:	20000008 	.word	0x20000008
 80004d8:	000f4240 	.word	0x000f4240

080004dc <HAL_ADC_Start_DMA>:
{
 80004dc:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80004e0:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004e2:	4b40      	ldr	r3, [pc, #256]	; (80005e4 <HAL_ADC_Start_DMA+0x108>)
 80004e4:	6802      	ldr	r2, [r0, #0]
{
 80004e6:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004e8:	429a      	cmp	r2, r3
{
 80004ea:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004ec:	d002      	beq.n	80004f4 <HAL_ADC_Start_DMA+0x18>
 80004ee:	493e      	ldr	r1, [pc, #248]	; (80005e8 <HAL_ADC_Start_DMA+0x10c>)
 80004f0:	428a      	cmp	r2, r1
 80004f2:	d103      	bne.n	80004fc <HAL_ADC_Start_DMA+0x20>
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80004fa:	d16e      	bne.n	80005da <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80004fc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000500:	2b01      	cmp	r3, #1
 8000502:	d06c      	beq.n	80005de <HAL_ADC_Start_DMA+0x102>
 8000504:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8000506:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000508:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800050c:	f7ff ffae 	bl	800046c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000510:	4606      	mov	r6, r0
 8000512:	2800      	cmp	r0, #0
 8000514:	d15d      	bne.n	80005d2 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000516:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000518:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800051a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800051e:	4b32      	ldr	r3, [pc, #200]	; (80005e8 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000520:	f020 0001 	bic.w	r0, r0, #1
 8000524:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000528:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800052a:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800052c:	d104      	bne.n	8000538 <HAL_ADC_Start_DMA+0x5c>
 800052e:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <HAL_ADC_Start_DMA+0x108>)
 8000530:	6853      	ldr	r3, [r2, #4]
 8000532:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000536:	d13e      	bne.n	80005b6 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800053a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800053e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000540:	684b      	ldr	r3, [r1, #4]
 8000542:	055a      	lsls	r2, r3, #21
 8000544:	d505      	bpl.n	8000552 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000548:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800054c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000550:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000552:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000554:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000556:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800055a:	bf18      	it	ne
 800055c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800055e:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000560:	bf18      	it	ne
 8000562:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000566:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000568:	2300      	movs	r3, #0
 800056a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000570:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000572:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <HAL_ADC_Start_DMA+0x114>)
 8000576:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <HAL_ADC_Start_DMA+0x118>)
 800057a:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800057c:	f06f 0302 	mvn.w	r3, #2
 8000580:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000584:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800058c:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000590:	4643      	mov	r3, r8
 8000592:	f000 f9d5 	bl	8000940 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000596:	6823      	ldr	r3, [r4, #0]
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800059e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80005a2:	689a      	ldr	r2, [r3, #8]
 80005a4:	bf0c      	ite	eq
 80005a6:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80005aa:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80005ae:	609a      	str	r2, [r3, #8]
}
 80005b0:	4630      	mov	r0, r6
 80005b2:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005be:	6853      	ldr	r3, [r2, #4]
 80005c0:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80005c2:	bf41      	itttt	mi
 80005c4:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80005c6:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80005ca:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80005ce:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80005d0:	e7bf      	b.n	8000552 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80005d2:	2300      	movs	r3, #0
 80005d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80005d8:	e7ea      	b.n	80005b0 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80005da:	2601      	movs	r6, #1
 80005dc:	e7e8      	b.n	80005b0 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80005de:	2602      	movs	r6, #2
 80005e0:	e7e6      	b.n	80005b0 <HAL_ADC_Start_DMA+0xd4>
 80005e2:	bf00      	nop
 80005e4:	40012400 	.word	0x40012400
 80005e8:	40012800 	.word	0x40012800
 80005ec:	08000201 	.word	0x08000201
 80005f0:	0800024f 	.word	0x0800024f
 80005f4:	08000349 	.word	0x08000349

080005f8 <ADC_ConversionStop_Disable>:
{
 80005f8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005fa:	6803      	ldr	r3, [r0, #0]
{
 80005fc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005fe:	689a      	ldr	r2, [r3, #8]
 8000600:	07d2      	lsls	r2, r2, #31
 8000602:	d401      	bmi.n	8000608 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000604:	2000      	movs	r0, #0
 8000606:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000608:	689a      	ldr	r2, [r3, #8]
 800060a:	f022 0201 	bic.w	r2, r2, #1
 800060e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000610:	f7ff fdde 	bl	80001d0 <HAL_GetTick>
 8000614:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000616:	6823      	ldr	r3, [r4, #0]
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	07db      	lsls	r3, r3, #31
 800061c:	d5f2      	bpl.n	8000604 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800061e:	f7ff fdd7 	bl	80001d0 <HAL_GetTick>
 8000622:	1b40      	subs	r0, r0, r5
 8000624:	2802      	cmp	r0, #2
 8000626:	d9f6      	bls.n	8000616 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800062a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000632:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	62e3      	str	r3, [r4, #44]	; 0x2c
 800063a:	bd38      	pop	{r3, r4, r5, pc}

0800063c <HAL_ADC_Init>:
{
 800063c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800063e:	4604      	mov	r4, r0
 8000640:	2800      	cmp	r0, #0
 8000642:	d071      	beq.n	8000728 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000644:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000646:	b923      	cbnz	r3, 8000652 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000648:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800064a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800064e:	f001 fcf1 	bl	8002034 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000652:	4620      	mov	r0, r4
 8000654:	f7ff ffd0 	bl	80005f8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000658:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800065a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800065e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000660:	d164      	bne.n	800072c <HAL_ADC_Init+0xf0>
 8000662:	2800      	cmp	r0, #0
 8000664:	d162      	bne.n	800072c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000666:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000668:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800066c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800066e:	f023 0302 	bic.w	r3, r3, #2
 8000672:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000676:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000678:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800067a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800067c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800067e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000682:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000686:	d038      	beq.n	80006fa <HAL_ADC_Init+0xbe>
 8000688:	2901      	cmp	r1, #1
 800068a:	bf14      	ite	ne
 800068c:	4606      	movne	r6, r0
 800068e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000692:	6965      	ldr	r5, [r4, #20]
 8000694:	2d01      	cmp	r5, #1
 8000696:	d107      	bne.n	80006a8 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000698:	2b00      	cmp	r3, #0
 800069a:	d130      	bne.n	80006fe <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800069c:	69a3      	ldr	r3, [r4, #24]
 800069e:	3b01      	subs	r3, #1
 80006a0:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80006a4:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80006a8:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80006aa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80006ae:	685d      	ldr	r5, [r3, #4]
 80006b0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80006b4:	ea45 0506 	orr.w	r5, r5, r6
 80006b8:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80006ba:	689e      	ldr	r6, [r3, #8]
 80006bc:	4d1d      	ldr	r5, [pc, #116]	; (8000734 <HAL_ADC_Init+0xf8>)
 80006be:	ea05 0506 	and.w	r5, r5, r6
 80006c2:	ea45 0502 	orr.w	r5, r5, r2
 80006c6:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80006c8:	d001      	beq.n	80006ce <HAL_ADC_Init+0x92>
 80006ca:	2901      	cmp	r1, #1
 80006cc:	d120      	bne.n	8000710 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80006ce:	6921      	ldr	r1, [r4, #16]
 80006d0:	3901      	subs	r1, #1
 80006d2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80006d4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80006d6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80006da:	4329      	orrs	r1, r5
 80006dc:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80006de:	6899      	ldr	r1, [r3, #8]
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <HAL_ADC_Init+0xfc>)
 80006e2:	400b      	ands	r3, r1
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d115      	bne.n	8000714 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80006e8:	2300      	movs	r3, #0
 80006ea:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80006ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006ee:	f023 0303 	bic.w	r3, r3, #3
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006fa:	460e      	mov	r6, r1
 80006fc:	e7c9      	b.n	8000692 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000700:	f043 0320 	orr.w	r3, r3, #32
 8000704:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000706:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800070e:	e7cb      	b.n	80006a8 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000710:	2100      	movs	r1, #0
 8000712:	e7df      	b.n	80006d4 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000714:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000716:	f023 0312 	bic.w	r3, r3, #18
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000720:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000728:	2001      	movs	r0, #1
}
 800072a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	62a3      	str	r3, [r4, #40]	; 0x28
 8000732:	e7f9      	b.n	8000728 <HAL_ADC_Init+0xec>
 8000734:	ffe1f7fd 	.word	0xffe1f7fd
 8000738:	ff1f0efe 	.word	0xff1f0efe

0800073c <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800073c:	2300      	movs	r3, #0
{
 800073e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000740:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000742:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000746:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000748:	2b01      	cmp	r3, #1
 800074a:	d05a      	beq.n	8000802 <HAL_ADCEx_Calibration_Start+0xc6>
 800074c:	2301      	movs	r3, #1
 800074e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000752:	f7ff ff51 	bl	80005f8 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000756:	4605      	mov	r5, r0
 8000758:	2800      	cmp	r0, #0
 800075a:	d132      	bne.n	80007c2 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800075c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800075e:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 8000760:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000764:	f023 0302 	bic.w	r3, r3, #2
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <HAL_ADCEx_Calibration_Start+0xcc>)
 8000770:	681e      	ldr	r6, [r3, #0]
 8000772:	f000 fdfb 	bl	800136c <HAL_RCCEx_GetPeriphCLKFreq>
 8000776:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800077a:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 800077c:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 800077e:	9b01      	ldr	r3, [sp, #4]
 8000780:	bb1b      	cbnz	r3, 80007ca <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000782:	4620      	mov	r0, r4
 8000784:	f7ff fe72 	bl	800046c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000788:	6822      	ldr	r2, [r4, #0]
 800078a:	6893      	ldr	r3, [r2, #8]
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8000792:	f7ff fd1d 	bl	80001d0 <HAL_GetTick>
 8000796:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	689a      	ldr	r2, [r3, #8]
 800079c:	0712      	lsls	r2, r2, #28
 800079e:	d418      	bmi.n	80007d2 <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80007a0:	689a      	ldr	r2, [r3, #8]
 80007a2:	f042 0204 	orr.w	r2, r2, #4
 80007a6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80007a8:	f7ff fd12 	bl	80001d0 <HAL_GetTick>
 80007ac:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	075b      	lsls	r3, r3, #29
 80007b4:	d41f      	bmi.n	80007f6 <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007b8:	f023 0303 	bic.w	r3, r3, #3
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007c2:	2300      	movs	r3, #0
 80007c4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80007c8:	e012      	b.n	80007f0 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 80007ca:	9b01      	ldr	r3, [sp, #4]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	e7d5      	b.n	800077e <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80007d2:	f7ff fcfd 	bl	80001d0 <HAL_GetTick>
 80007d6:	1b80      	subs	r0, r0, r6
 80007d8:	280a      	cmp	r0, #10
 80007da:	d9dd      	bls.n	8000798 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 80007dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 80007de:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 80007e0:	f023 0312 	bic.w	r3, r3, #18
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80007ea:	2300      	movs	r3, #0
 80007ec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80007f0:	4628      	mov	r0, r5
 80007f2:	b002      	add	sp, #8
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80007f6:	f7ff fceb 	bl	80001d0 <HAL_GetTick>
 80007fa:	1b80      	subs	r0, r0, r6
 80007fc:	280a      	cmp	r0, #10
 80007fe:	d9d6      	bls.n	80007ae <HAL_ADCEx_Calibration_Start+0x72>
 8000800:	e7ec      	b.n	80007dc <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 8000802:	2502      	movs	r5, #2
 8000804:	e7f4      	b.n	80007f0 <HAL_ADCEx_Calibration_Start+0xb4>
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008

0800080c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800080c:	4770      	bx	lr
	...

08000810 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000812:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000814:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000816:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800081e:	041b      	lsls	r3, r3, #16
 8000820:	0c1b      	lsrs	r3, r3, #16
 8000822:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800082a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800082c:	60d3      	str	r3, [r2, #12]
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000836:	b530      	push	{r4, r5, lr}
 8000838:	68dc      	ldr	r4, [r3, #12]
 800083a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000842:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000844:	2b04      	cmp	r3, #4
 8000846:	bf28      	it	cs
 8000848:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000850:	bf98      	it	ls
 8000852:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	fa05 f303 	lsl.w	r3, r5, r3
 8000858:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085c:	bf88      	it	hi
 800085e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	4019      	ands	r1, r3
 8000862:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	fa05 f404 	lsl.w	r4, r5, r4
 8000868:	3c01      	subs	r4, #1
 800086a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800086c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086e:	ea42 0201 	orr.w	r2, r2, r1
 8000872:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	bfaf      	iteee	ge
 8000878:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087c:	4b06      	ldrlt	r3, [pc, #24]	; (8000898 <HAL_NVIC_SetPriority+0x64>)
 800087e:	f000 000f 	andlt.w	r0, r0, #15
 8000882:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	bfa5      	ittet	ge
 8000886:	b2d2      	uxtbge	r2, r2
 8000888:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000892:	bd30      	pop	{r4, r5, pc}
 8000894:	e000ed00 	.word	0xe000ed00
 8000898:	e000ed14 	.word	0xe000ed14

0800089c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800089c:	2301      	movs	r3, #1
 800089e:	0942      	lsrs	r2, r0, #5
 80008a0:	f000 001f 	and.w	r0, r0, #31
 80008a4:	fa03 f000 	lsl.w	r0, r3, r0
 80008a8:	4b01      	ldr	r3, [pc, #4]	; (80008b0 <HAL_NVIC_EnableIRQ+0x14>)
 80008aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008ae:	4770      	bx	lr
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	3801      	subs	r0, #1
 80008b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008ba:	d20a      	bcs.n	80008d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e010 	.word	0xe000e010
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008e0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80008e2:	b330      	cbz	r0, 8000932 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008e4:	2214      	movs	r2, #20
 80008e6:	6801      	ldr	r1, [r0, #0]
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80008ea:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80008ec:	440b      	add	r3, r1
 80008ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80008f8:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80008fa:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80008fc:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008fe:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000902:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000904:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000906:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800090a:	4323      	orrs	r3, r4
 800090c:	6904      	ldr	r4, [r0, #16]
 800090e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000910:	6944      	ldr	r4, [r0, #20]
 8000912:	4323      	orrs	r3, r4
 8000914:	6984      	ldr	r4, [r0, #24]
 8000916:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000918:	69c4      	ldr	r4, [r0, #28]
 800091a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800091c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800091e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000920:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000922:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000924:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000928:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800092a:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800092e:	4618      	mov	r0, r3
 8000930:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000932:	2001      	movs	r0, #1
}
 8000934:	bd10      	pop	{r4, pc}
 8000936:	bf00      	nop
 8000938:	bffdfff8 	.word	0xbffdfff8
 800093c:	40020000 	.word	0x40020000

08000940 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000940:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000942:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000946:	2c01      	cmp	r4, #1
 8000948:	d035      	beq.n	80009b6 <HAL_DMA_Start_IT+0x76>
 800094a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800094c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000950:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000954:	42a5      	cmp	r5, r4
 8000956:	f04f 0600 	mov.w	r6, #0
 800095a:	f04f 0402 	mov.w	r4, #2
 800095e:	d128      	bne.n	80009b2 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000960:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000964:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000966:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000968:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800096a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800096c:	f026 0601 	bic.w	r6, r6, #1
 8000970:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000972:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000974:	40bd      	lsls	r5, r7
 8000976:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000978:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800097a:	6843      	ldr	r3, [r0, #4]
 800097c:	6805      	ldr	r5, [r0, #0]
 800097e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000980:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000982:	bf0b      	itete	eq
 8000984:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000986:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000988:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800098a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800098c:	b14b      	cbz	r3, 80009a2 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800098e:	6823      	ldr	r3, [r4, #0]
 8000990:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000994:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000996:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000998:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	602b      	str	r3, [r5, #0]
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009a2:	6823      	ldr	r3, [r4, #0]
 80009a4:	f023 0304 	bic.w	r3, r3, #4
 80009a8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	f043 030a 	orr.w	r3, r3, #10
 80009b0:	e7f0      	b.n	8000994 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80009b2:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80009b6:	2002      	movs	r0, #2
}
 80009b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080009bc <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009bc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80009c0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d003      	beq.n	80009ce <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009c6:	2304      	movs	r3, #4
 80009c8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80009ca:	2001      	movs	r0, #1
 80009cc:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ce:	6803      	ldr	r3, [r0, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	f022 020e 	bic.w	r2, r2, #14
 80009d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	f022 0201 	bic.w	r2, r2, #1
 80009de:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009e0:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <HAL_DMA_Abort_IT+0x88>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d01f      	beq.n	8000a26 <HAL_DMA_Abort_IT+0x6a>
 80009e6:	3214      	adds	r2, #20
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d01e      	beq.n	8000a2a <HAL_DMA_Abort_IT+0x6e>
 80009ec:	3214      	adds	r2, #20
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01d      	beq.n	8000a2e <HAL_DMA_Abort_IT+0x72>
 80009f2:	3214      	adds	r2, #20
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d01d      	beq.n	8000a34 <HAL_DMA_Abort_IT+0x78>
 80009f8:	3214      	adds	r2, #20
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d01d      	beq.n	8000a3a <HAL_DMA_Abort_IT+0x7e>
 80009fe:	3214      	adds	r2, #20
 8000a00:	4293      	cmp	r3, r2
 8000a02:	bf0c      	ite	eq
 8000a04:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000a08:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8000a0e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a10:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000a12:	2301      	movs	r3, #1
 8000a14:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8000a18:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000a1a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000a1e:	b17b      	cbz	r3, 8000a40 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8000a20:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000a22:	4620      	mov	r0, r4
 8000a24:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a26:	2301      	movs	r3, #1
 8000a28:	e7f0      	b.n	8000a0c <HAL_DMA_Abort_IT+0x50>
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	e7ee      	b.n	8000a0c <HAL_DMA_Abort_IT+0x50>
 8000a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a32:	e7eb      	b.n	8000a0c <HAL_DMA_Abort_IT+0x50>
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	e7e8      	b.n	8000a0c <HAL_DMA_Abort_IT+0x50>
 8000a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3e:	e7e5      	b.n	8000a0c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000a40:	4618      	mov	r0, r3
}
 8000a42:	bd10      	pop	{r4, pc}
 8000a44:	40020008 	.word	0x40020008
 8000a48:	40020000 	.word	0x40020000

08000a4c <HAL_DMA_IRQHandler>:
{
 8000a4c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a4e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a50:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a52:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a54:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000a56:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a58:	4095      	lsls	r5, r2
 8000a5a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000a5c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a5e:	d032      	beq.n	8000ac6 <HAL_DMA_IRQHandler+0x7a>
 8000a60:	074d      	lsls	r5, r1, #29
 8000a62:	d530      	bpl.n	8000ac6 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a68:	bf5e      	ittt	pl
 8000a6a:	681a      	ldrpl	r2, [r3, #0]
 8000a6c:	f022 0204 	bicpl.w	r2, r2, #4
 8000a70:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000a72:	4a3e      	ldr	r2, [pc, #248]	; (8000b6c <HAL_DMA_IRQHandler+0x120>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d019      	beq.n	8000aac <HAL_DMA_IRQHandler+0x60>
 8000a78:	3214      	adds	r2, #20
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d018      	beq.n	8000ab0 <HAL_DMA_IRQHandler+0x64>
 8000a7e:	3214      	adds	r2, #20
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d017      	beq.n	8000ab4 <HAL_DMA_IRQHandler+0x68>
 8000a84:	3214      	adds	r2, #20
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d017      	beq.n	8000aba <HAL_DMA_IRQHandler+0x6e>
 8000a8a:	3214      	adds	r2, #20
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d017      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0x74>
 8000a90:	3214      	adds	r2, #20
 8000a92:	4293      	cmp	r3, r2
 8000a94:	bf0c      	ite	eq
 8000a96:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000a9a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000a9e:	4a34      	ldr	r2, [pc, #208]	; (8000b70 <HAL_DMA_IRQHandler+0x124>)
 8000aa0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000aa2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d05e      	beq.n	8000b66 <HAL_DMA_IRQHandler+0x11a>
}
 8000aa8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000aaa:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000aac:	2304      	movs	r3, #4
 8000aae:	e7f6      	b.n	8000a9e <HAL_DMA_IRQHandler+0x52>
 8000ab0:	2340      	movs	r3, #64	; 0x40
 8000ab2:	e7f4      	b.n	8000a9e <HAL_DMA_IRQHandler+0x52>
 8000ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab8:	e7f1      	b.n	8000a9e <HAL_DMA_IRQHandler+0x52>
 8000aba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000abe:	e7ee      	b.n	8000a9e <HAL_DMA_IRQHandler+0x52>
 8000ac0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ac4:	e7eb      	b.n	8000a9e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ac6:	2502      	movs	r5, #2
 8000ac8:	4095      	lsls	r5, r2
 8000aca:	4225      	tst	r5, r4
 8000acc:	d035      	beq.n	8000b3a <HAL_DMA_IRQHandler+0xee>
 8000ace:	078d      	lsls	r5, r1, #30
 8000ad0:	d533      	bpl.n	8000b3a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	0694      	lsls	r4, r2, #26
 8000ad6:	d406      	bmi.n	8000ae6 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	f022 020a 	bic.w	r2, r2, #10
 8000ade:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ae6:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <HAL_DMA_IRQHandler+0x120>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d019      	beq.n	8000b20 <HAL_DMA_IRQHandler+0xd4>
 8000aec:	3214      	adds	r2, #20
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d018      	beq.n	8000b24 <HAL_DMA_IRQHandler+0xd8>
 8000af2:	3214      	adds	r2, #20
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d017      	beq.n	8000b28 <HAL_DMA_IRQHandler+0xdc>
 8000af8:	3214      	adds	r2, #20
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d017      	beq.n	8000b2e <HAL_DMA_IRQHandler+0xe2>
 8000afe:	3214      	adds	r2, #20
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d017      	beq.n	8000b34 <HAL_DMA_IRQHandler+0xe8>
 8000b04:	3214      	adds	r2, #20
 8000b06:	4293      	cmp	r3, r2
 8000b08:	bf0c      	ite	eq
 8000b0a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000b0e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_DMA_IRQHandler+0x124>)
 8000b14:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000b16:	2300      	movs	r3, #0
 8000b18:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000b1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b1e:	e7c1      	b.n	8000aa4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000b20:	2302      	movs	r3, #2
 8000b22:	e7f6      	b.n	8000b12 <HAL_DMA_IRQHandler+0xc6>
 8000b24:	2320      	movs	r3, #32
 8000b26:	e7f4      	b.n	8000b12 <HAL_DMA_IRQHandler+0xc6>
 8000b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b2c:	e7f1      	b.n	8000b12 <HAL_DMA_IRQHandler+0xc6>
 8000b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b32:	e7ee      	b.n	8000b12 <HAL_DMA_IRQHandler+0xc6>
 8000b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b38:	e7eb      	b.n	8000b12 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b3a:	2508      	movs	r5, #8
 8000b3c:	4095      	lsls	r5, r2
 8000b3e:	4225      	tst	r5, r4
 8000b40:	d011      	beq.n	8000b66 <HAL_DMA_IRQHandler+0x11a>
 8000b42:	0709      	lsls	r1, r1, #28
 8000b44:	d50f      	bpl.n	8000b66 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b46:	6819      	ldr	r1, [r3, #0]
 8000b48:	f021 010e 	bic.w	r1, r1, #14
 8000b4c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b4e:	2301      	movs	r3, #1
 8000b50:	fa03 f202 	lsl.w	r2, r3, r2
 8000b54:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b56:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000b58:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000b62:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b64:	e79e      	b.n	8000aa4 <HAL_DMA_IRQHandler+0x58>
}
 8000b66:	bc70      	pop	{r4, r5, r6}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40020008 	.word	0x40020008
 8000b70:	40020000 	.word	0x40020000

08000b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000b78:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000b7a:	4616      	mov	r6, r2
 8000b7c:	4b65      	ldr	r3, [pc, #404]	; (8000d14 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b7e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000d24 <HAL_GPIO_Init+0x1b0>
 8000b82:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000d28 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000b86:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000b8c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b90:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d17f      	bne.n	8000c98 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000b98:	684d      	ldr	r5, [r1, #4]
 8000b9a:	2d12      	cmp	r5, #18
 8000b9c:	f000 80af 	beq.w	8000cfe <HAL_GPIO_Init+0x18a>
 8000ba0:	f200 8088 	bhi.w	8000cb4 <HAL_GPIO_Init+0x140>
 8000ba4:	2d02      	cmp	r5, #2
 8000ba6:	f000 80a7 	beq.w	8000cf8 <HAL_GPIO_Init+0x184>
 8000baa:	d87c      	bhi.n	8000ca6 <HAL_GPIO_Init+0x132>
 8000bac:	2d00      	cmp	r5, #0
 8000bae:	f000 808e 	beq.w	8000cce <HAL_GPIO_Init+0x15a>
 8000bb2:	2d01      	cmp	r5, #1
 8000bb4:	f000 809e 	beq.w	8000cf4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bb8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bbc:	2cff      	cmp	r4, #255	; 0xff
 8000bbe:	bf93      	iteet	ls
 8000bc0:	4682      	movls	sl, r0
 8000bc2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000bc6:	3d08      	subhi	r5, #8
 8000bc8:	f8d0 b000 	ldrls.w	fp, [r0]
 8000bcc:	bf92      	itee	ls
 8000bce:	00b5      	lslls	r5, r6, #2
 8000bd0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000bd4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bd6:	fa09 f805 	lsl.w	r8, r9, r5
 8000bda:	ea2b 0808 	bic.w	r8, fp, r8
 8000bde:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000be2:	bf88      	it	hi
 8000be4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000be8:	ea48 0505 	orr.w	r5, r8, r5
 8000bec:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000bf4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000bf8:	d04e      	beq.n	8000c98 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfa:	4d47      	ldr	r5, [pc, #284]	; (8000d18 <HAL_GPIO_Init+0x1a4>)
 8000bfc:	4f46      	ldr	r7, [pc, #280]	; (8000d18 <HAL_GPIO_Init+0x1a4>)
 8000bfe:	69ad      	ldr	r5, [r5, #24]
 8000c00:	f026 0803 	bic.w	r8, r6, #3
 8000c04:	f045 0501 	orr.w	r5, r5, #1
 8000c08:	61bd      	str	r5, [r7, #24]
 8000c0a:	69bd      	ldr	r5, [r7, #24]
 8000c0c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000c10:	f005 0501 	and.w	r5, r5, #1
 8000c14:	9501      	str	r5, [sp, #4]
 8000c16:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c1a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c20:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000c24:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000c28:	fa09 f90b 	lsl.w	r9, r9, fp
 8000c2c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c30:	4d3a      	ldr	r5, [pc, #232]	; (8000d1c <HAL_GPIO_Init+0x1a8>)
 8000c32:	42a8      	cmp	r0, r5
 8000c34:	d068      	beq.n	8000d08 <HAL_GPIO_Init+0x194>
 8000c36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c3a:	42a8      	cmp	r0, r5
 8000c3c:	d066      	beq.n	8000d0c <HAL_GPIO_Init+0x198>
 8000c3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c42:	42a8      	cmp	r0, r5
 8000c44:	d064      	beq.n	8000d10 <HAL_GPIO_Init+0x19c>
 8000c46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c4a:	42a8      	cmp	r0, r5
 8000c4c:	bf0c      	ite	eq
 8000c4e:	2503      	moveq	r5, #3
 8000c50:	2504      	movne	r5, #4
 8000c52:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c56:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000c5a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c5e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c60:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000c64:	bf14      	ite	ne
 8000c66:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c68:	43a5      	biceq	r5, r4
 8000c6a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c6c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c6e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000c72:	bf14      	ite	ne
 8000c74:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c76:	43a5      	biceq	r5, r4
 8000c78:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c7a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c7c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c80:	bf14      	ite	ne
 8000c82:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c84:	43a5      	biceq	r5, r4
 8000c86:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c88:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c8a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c8e:	bf14      	ite	ne
 8000c90:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c92:	ea25 0404 	biceq.w	r4, r5, r4
 8000c96:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c98:	3601      	adds	r6, #1
 8000c9a:	2e10      	cmp	r6, #16
 8000c9c:	f47f af73 	bne.w	8000b86 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000ca0:	b003      	add	sp, #12
 8000ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000ca6:	2d03      	cmp	r5, #3
 8000ca8:	d022      	beq.n	8000cf0 <HAL_GPIO_Init+0x17c>
 8000caa:	2d11      	cmp	r5, #17
 8000cac:	d184      	bne.n	8000bb8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cae:	68ca      	ldr	r2, [r1, #12]
 8000cb0:	3204      	adds	r2, #4
          break;
 8000cb2:	e781      	b.n	8000bb8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000cb4:	4f1a      	ldr	r7, [pc, #104]	; (8000d20 <HAL_GPIO_Init+0x1ac>)
 8000cb6:	42bd      	cmp	r5, r7
 8000cb8:	d009      	beq.n	8000cce <HAL_GPIO_Init+0x15a>
 8000cba:	d812      	bhi.n	8000ce2 <HAL_GPIO_Init+0x16e>
 8000cbc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000d2c <HAL_GPIO_Init+0x1b8>
 8000cc0:	454d      	cmp	r5, r9
 8000cc2:	d004      	beq.n	8000cce <HAL_GPIO_Init+0x15a>
 8000cc4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000cc8:	454d      	cmp	r5, r9
 8000cca:	f47f af75 	bne.w	8000bb8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cce:	688a      	ldr	r2, [r1, #8]
 8000cd0:	b1c2      	cbz	r2, 8000d04 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000cd4:	bf0c      	ite	eq
 8000cd6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000cda:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cde:	2208      	movs	r2, #8
 8000ce0:	e76a      	b.n	8000bb8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000ce2:	4575      	cmp	r5, lr
 8000ce4:	d0f3      	beq.n	8000cce <HAL_GPIO_Init+0x15a>
 8000ce6:	4565      	cmp	r5, ip
 8000ce8:	d0f1      	beq.n	8000cce <HAL_GPIO_Init+0x15a>
 8000cea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000d30 <HAL_GPIO_Init+0x1bc>
 8000cee:	e7eb      	b.n	8000cc8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e761      	b.n	8000bb8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cf4:	68ca      	ldr	r2, [r1, #12]
          break;
 8000cf6:	e75f      	b.n	8000bb8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cf8:	68ca      	ldr	r2, [r1, #12]
 8000cfa:	3208      	adds	r2, #8
          break;
 8000cfc:	e75c      	b.n	8000bb8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cfe:	68ca      	ldr	r2, [r1, #12]
 8000d00:	320c      	adds	r2, #12
          break;
 8000d02:	e759      	b.n	8000bb8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d04:	2204      	movs	r2, #4
 8000d06:	e757      	b.n	8000bb8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d08:	2500      	movs	r5, #0
 8000d0a:	e7a2      	b.n	8000c52 <HAL_GPIO_Init+0xde>
 8000d0c:	2501      	movs	r5, #1
 8000d0e:	e7a0      	b.n	8000c52 <HAL_GPIO_Init+0xde>
 8000d10:	2502      	movs	r5, #2
 8000d12:	e79e      	b.n	8000c52 <HAL_GPIO_Init+0xde>
 8000d14:	40010400 	.word	0x40010400
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	10210000 	.word	0x10210000
 8000d24:	10310000 	.word	0x10310000
 8000d28:	10320000 	.word	0x10320000
 8000d2c:	10110000 	.word	0x10110000
 8000d30:	10220000 	.word	0x10220000

08000d34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d34:	b10a      	cbz	r2, 8000d3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d36:	6101      	str	r1, [r0, #16]
 8000d38:	4770      	bx	lr
 8000d3a:	0409      	lsls	r1, r1, #16
 8000d3c:	e7fb      	b.n	8000d36 <HAL_GPIO_WritePin+0x2>

08000d3e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000d3e:	68c3      	ldr	r3, [r0, #12]
 8000d40:	4059      	eors	r1, r3
 8000d42:	60c1      	str	r1, [r0, #12]
 8000d44:	4770      	bx	lr
	...

08000d48 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d48:	6803      	ldr	r3, [r0, #0]
{
 8000d4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4e:	07db      	lsls	r3, r3, #31
{
 8000d50:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d52:	d410      	bmi.n	8000d76 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d54:	682b      	ldr	r3, [r5, #0]
 8000d56:	079f      	lsls	r7, r3, #30
 8000d58:	d45e      	bmi.n	8000e18 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5a:	682b      	ldr	r3, [r5, #0]
 8000d5c:	0719      	lsls	r1, r3, #28
 8000d5e:	f100 8095 	bmi.w	8000e8c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d62:	682b      	ldr	r3, [r5, #0]
 8000d64:	075a      	lsls	r2, r3, #29
 8000d66:	f100 80bf 	bmi.w	8000ee8 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d6a:	69ea      	ldr	r2, [r5, #28]
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	f040 812d 	bne.w	8000fcc <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000d72:	2000      	movs	r0, #0
 8000d74:	e014      	b.n	8000da0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d76:	4c90      	ldr	r4, [pc, #576]	; (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000d78:	6863      	ldr	r3, [r4, #4]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d007      	beq.n	8000d92 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d82:	6863      	ldr	r3, [r4, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d10c      	bne.n	8000da6 <HAL_RCC_OscConfig+0x5e>
 8000d8c:	6863      	ldr	r3, [r4, #4]
 8000d8e:	03de      	lsls	r6, r3, #15
 8000d90:	d509      	bpl.n	8000da6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	039c      	lsls	r4, r3, #14
 8000d96:	d5dd      	bpl.n	8000d54 <HAL_RCC_OscConfig+0xc>
 8000d98:	686b      	ldr	r3, [r5, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1da      	bne.n	8000d54 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d9e:	2001      	movs	r0, #1
}
 8000da0:	b002      	add	sp, #8
 8000da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da6:	686b      	ldr	r3, [r5, #4]
 8000da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dac:	d110      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x88>
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000db6:	f7ff fa0b 	bl	80001d0 <HAL_GetTick>
 8000dba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	0398      	lsls	r0, r3, #14
 8000dc0:	d4c8      	bmi.n	8000d54 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fa05 	bl	80001d0 <HAL_GetTick>
 8000dc6:	1b80      	subs	r0, r0, r6
 8000dc8:	2864      	cmp	r0, #100	; 0x64
 8000dca:	d9f7      	bls.n	8000dbc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000dcc:	2003      	movs	r0, #3
 8000dce:	e7e7      	b.n	8000da0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd0:	b99b      	cbnz	r3, 8000dfa <HAL_RCC_OscConfig+0xb2>
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd8:	6023      	str	r3, [r4, #0]
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000de2:	f7ff f9f5 	bl	80001d0 <HAL_GetTick>
 8000de6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	0399      	lsls	r1, r3, #14
 8000dec:	d5b2      	bpl.n	8000d54 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dee:	f7ff f9ef 	bl	80001d0 <HAL_GetTick>
 8000df2:	1b80      	subs	r0, r0, r6
 8000df4:	2864      	cmp	r0, #100	; 0x64
 8000df6:	d9f7      	bls.n	8000de8 <HAL_RCC_OscConfig+0xa0>
 8000df8:	e7e8      	b.n	8000dcc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	d103      	bne.n	8000e0a <HAL_RCC_OscConfig+0xc2>
 8000e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e06:	6023      	str	r3, [r4, #0]
 8000e08:	e7d1      	b.n	8000dae <HAL_RCC_OscConfig+0x66>
 8000e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0e:	6023      	str	r3, [r4, #0]
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e16:	e7cd      	b.n	8000db4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e18:	4c67      	ldr	r4, [pc, #412]	; (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e1a:	6863      	ldr	r3, [r4, #4]
 8000e1c:	f013 0f0c 	tst.w	r3, #12
 8000e20:	d007      	beq.n	8000e32 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e22:	6863      	ldr	r3, [r4, #4]
 8000e24:	f003 030c 	and.w	r3, r3, #12
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	d110      	bne.n	8000e4e <HAL_RCC_OscConfig+0x106>
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	03da      	lsls	r2, r3, #15
 8000e30:	d40d      	bmi.n	8000e4e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	079b      	lsls	r3, r3, #30
 8000e36:	d502      	bpl.n	8000e3e <HAL_RCC_OscConfig+0xf6>
 8000e38:	692b      	ldr	r3, [r5, #16]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d1af      	bne.n	8000d9e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	696a      	ldr	r2, [r5, #20]
 8000e42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e4a:	6023      	str	r3, [r4, #0]
 8000e4c:	e785      	b.n	8000d5a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4e:	692a      	ldr	r2, [r5, #16]
 8000e50:	4b5a      	ldr	r3, [pc, #360]	; (8000fbc <HAL_RCC_OscConfig+0x274>)
 8000e52:	b16a      	cbz	r2, 8000e70 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e58:	f7ff f9ba 	bl	80001d0 <HAL_GetTick>
 8000e5c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e5e:	6823      	ldr	r3, [r4, #0]
 8000e60:	079f      	lsls	r7, r3, #30
 8000e62:	d4ec      	bmi.n	8000e3e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e64:	f7ff f9b4 	bl	80001d0 <HAL_GetTick>
 8000e68:	1b80      	subs	r0, r0, r6
 8000e6a:	2802      	cmp	r0, #2
 8000e6c:	d9f7      	bls.n	8000e5e <HAL_RCC_OscConfig+0x116>
 8000e6e:	e7ad      	b.n	8000dcc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000e70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e72:	f7ff f9ad 	bl	80001d0 <HAL_GetTick>
 8000e76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	0798      	lsls	r0, r3, #30
 8000e7c:	f57f af6d 	bpl.w	8000d5a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e80:	f7ff f9a6 	bl	80001d0 <HAL_GetTick>
 8000e84:	1b80      	subs	r0, r0, r6
 8000e86:	2802      	cmp	r0, #2
 8000e88:	d9f6      	bls.n	8000e78 <HAL_RCC_OscConfig+0x130>
 8000e8a:	e79f      	b.n	8000dcc <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e8c:	69aa      	ldr	r2, [r5, #24]
 8000e8e:	4c4a      	ldr	r4, [pc, #296]	; (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000e90:	4b4b      	ldr	r3, [pc, #300]	; (8000fc0 <HAL_RCC_OscConfig+0x278>)
 8000e92:	b1da      	cbz	r2, 8000ecc <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e98:	f7ff f99a 	bl	80001d0 <HAL_GetTick>
 8000e9c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ea0:	079b      	lsls	r3, r3, #30
 8000ea2:	d50d      	bpl.n	8000ec0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ea4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ea8:	4b46      	ldr	r3, [pc, #280]	; (8000fc4 <HAL_RCC_OscConfig+0x27c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000eb0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000eb2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000eb4:	9b01      	ldr	r3, [sp, #4]
 8000eb6:	1e5a      	subs	r2, r3, #1
 8000eb8:	9201      	str	r2, [sp, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f9      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x16a>
 8000ebe:	e750      	b.n	8000d62 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ec0:	f7ff f986 	bl	80001d0 <HAL_GetTick>
 8000ec4:	1b80      	subs	r0, r0, r6
 8000ec6:	2802      	cmp	r0, #2
 8000ec8:	d9e9      	bls.n	8000e9e <HAL_RCC_OscConfig+0x156>
 8000eca:	e77f      	b.n	8000dcc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000ecc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ece:	f7ff f97f 	bl	80001d0 <HAL_GetTick>
 8000ed2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ed6:	079f      	lsls	r7, r3, #30
 8000ed8:	f57f af43 	bpl.w	8000d62 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000edc:	f7ff f978 	bl	80001d0 <HAL_GetTick>
 8000ee0:	1b80      	subs	r0, r0, r6
 8000ee2:	2802      	cmp	r0, #2
 8000ee4:	d9f6      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x18c>
 8000ee6:	e771      	b.n	8000dcc <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee8:	4c33      	ldr	r4, [pc, #204]	; (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000eea:	69e3      	ldr	r3, [r4, #28]
 8000eec:	00d8      	lsls	r0, r3, #3
 8000eee:	d424      	bmi.n	8000f3a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000ef0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	69e3      	ldr	r3, [r4, #28]
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	61e3      	str	r3, [r4, #28]
 8000efa:	69e3      	ldr	r3, [r4, #28]
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f04:	4e30      	ldr	r6, [pc, #192]	; (8000fc8 <HAL_RCC_OscConfig+0x280>)
 8000f06:	6833      	ldr	r3, [r6, #0]
 8000f08:	05d9      	lsls	r1, r3, #23
 8000f0a:	d518      	bpl.n	8000f3e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f0c:	68eb      	ldr	r3, [r5, #12]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d126      	bne.n	8000f60 <HAL_RCC_OscConfig+0x218>
 8000f12:	6a23      	ldr	r3, [r4, #32]
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f1a:	f7ff f959 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f1e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f22:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f24:	6a23      	ldr	r3, [r4, #32]
 8000f26:	079b      	lsls	r3, r3, #30
 8000f28:	d53f      	bpl.n	8000faa <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000f2a:	2f00      	cmp	r7, #0
 8000f2c:	f43f af1d 	beq.w	8000d6a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f30:	69e3      	ldr	r3, [r4, #28]
 8000f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f36:	61e3      	str	r3, [r4, #28]
 8000f38:	e717      	b.n	8000d6a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000f3a:	2700      	movs	r7, #0
 8000f3c:	e7e2      	b.n	8000f04 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f3e:	6833      	ldr	r3, [r6, #0]
 8000f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f44:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f46:	f7ff f943 	bl	80001d0 <HAL_GetTick>
 8000f4a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4c:	6833      	ldr	r3, [r6, #0]
 8000f4e:	05da      	lsls	r2, r3, #23
 8000f50:	d4dc      	bmi.n	8000f0c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f52:	f7ff f93d 	bl	80001d0 <HAL_GetTick>
 8000f56:	eba0 0008 	sub.w	r0, r0, r8
 8000f5a:	2864      	cmp	r0, #100	; 0x64
 8000f5c:	d9f6      	bls.n	8000f4c <HAL_RCC_OscConfig+0x204>
 8000f5e:	e735      	b.n	8000dcc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f60:	b9ab      	cbnz	r3, 8000f8e <HAL_RCC_OscConfig+0x246>
 8000f62:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f68:	f023 0301 	bic.w	r3, r3, #1
 8000f6c:	6223      	str	r3, [r4, #32]
 8000f6e:	6a23      	ldr	r3, [r4, #32]
 8000f70:	f023 0304 	bic.w	r3, r3, #4
 8000f74:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f76:	f7ff f92b 	bl	80001d0 <HAL_GetTick>
 8000f7a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f7c:	6a23      	ldr	r3, [r4, #32]
 8000f7e:	0798      	lsls	r0, r3, #30
 8000f80:	d5d3      	bpl.n	8000f2a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f82:	f7ff f925 	bl	80001d0 <HAL_GetTick>
 8000f86:	1b80      	subs	r0, r0, r6
 8000f88:	4540      	cmp	r0, r8
 8000f8a:	d9f7      	bls.n	8000f7c <HAL_RCC_OscConfig+0x234>
 8000f8c:	e71e      	b.n	8000dcc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	6a23      	ldr	r3, [r4, #32]
 8000f92:	d103      	bne.n	8000f9c <HAL_RCC_OscConfig+0x254>
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6223      	str	r3, [r4, #32]
 8000f9a:	e7ba      	b.n	8000f12 <HAL_RCC_OscConfig+0x1ca>
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6223      	str	r3, [r4, #32]
 8000fa2:	6a23      	ldr	r3, [r4, #32]
 8000fa4:	f023 0304 	bic.w	r3, r3, #4
 8000fa8:	e7b6      	b.n	8000f18 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000faa:	f7ff f911 	bl	80001d0 <HAL_GetTick>
 8000fae:	eba0 0008 	sub.w	r0, r0, r8
 8000fb2:	42b0      	cmp	r0, r6
 8000fb4:	d9b6      	bls.n	8000f24 <HAL_RCC_OscConfig+0x1dc>
 8000fb6:	e709      	b.n	8000dcc <HAL_RCC_OscConfig+0x84>
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	42420000 	.word	0x42420000
 8000fc0:	42420480 	.word	0x42420480
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fcc:	4c22      	ldr	r4, [pc, #136]	; (8001058 <HAL_RCC_OscConfig+0x310>)
 8000fce:	6863      	ldr	r3, [r4, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	f43f aee2 	beq.w	8000d9e <HAL_RCC_OscConfig+0x56>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	4e1f      	ldr	r6, [pc, #124]	; (800105c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fde:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000fe0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fe2:	d12b      	bne.n	800103c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000fe4:	f7ff f8f4 	bl	80001d0 <HAL_GetTick>
 8000fe8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	0199      	lsls	r1, r3, #6
 8000fee:	d41f      	bmi.n	8001030 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ff0:	6a2b      	ldr	r3, [r5, #32]
 8000ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff6:	d105      	bne.n	8001004 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff8:	6862      	ldr	r2, [r4, #4]
 8000ffa:	68a9      	ldr	r1, [r5, #8]
 8000ffc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001000:	430a      	orrs	r2, r1
 8001002:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001004:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001006:	6862      	ldr	r2, [r4, #4]
 8001008:	430b      	orrs	r3, r1
 800100a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800100e:	4313      	orrs	r3, r2
 8001010:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001012:	2301      	movs	r3, #1
 8001014:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001016:	f7ff f8db 	bl	80001d0 <HAL_GetTick>
 800101a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	019a      	lsls	r2, r3, #6
 8001020:	f53f aea7 	bmi.w	8000d72 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001024:	f7ff f8d4 	bl	80001d0 <HAL_GetTick>
 8001028:	1b40      	subs	r0, r0, r5
 800102a:	2802      	cmp	r0, #2
 800102c:	d9f6      	bls.n	800101c <HAL_RCC_OscConfig+0x2d4>
 800102e:	e6cd      	b.n	8000dcc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001030:	f7ff f8ce 	bl	80001d0 <HAL_GetTick>
 8001034:	1bc0      	subs	r0, r0, r7
 8001036:	2802      	cmp	r0, #2
 8001038:	d9d7      	bls.n	8000fea <HAL_RCC_OscConfig+0x2a2>
 800103a:	e6c7      	b.n	8000dcc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800103c:	f7ff f8c8 	bl	80001d0 <HAL_GetTick>
 8001040:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	019b      	lsls	r3, r3, #6
 8001046:	f57f ae94 	bpl.w	8000d72 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104a:	f7ff f8c1 	bl	80001d0 <HAL_GetTick>
 800104e:	1b40      	subs	r0, r0, r5
 8001050:	2802      	cmp	r0, #2
 8001052:	d9f6      	bls.n	8001042 <HAL_RCC_OscConfig+0x2fa>
 8001054:	e6ba      	b.n	8000dcc <HAL_RCC_OscConfig+0x84>
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	42420060 	.word	0x42420060

08001060 <HAL_RCC_GetSysClockFreq>:
{
 8001060:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001064:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001066:	ac02      	add	r4, sp, #8
 8001068:	f103 0510 	add.w	r5, r3, #16
 800106c:	4622      	mov	r2, r4
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	6859      	ldr	r1, [r3, #4]
 8001072:	3308      	adds	r3, #8
 8001074:	c203      	stmia	r2!, {r0, r1}
 8001076:	42ab      	cmp	r3, r5
 8001078:	4614      	mov	r4, r2
 800107a:	d1f7      	bne.n	800106c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800107c:	2301      	movs	r3, #1
 800107e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001082:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001084:	4911      	ldr	r1, [pc, #68]	; (80010cc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001086:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800108a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800108c:	f003 020c 	and.w	r2, r3, #12
 8001090:	2a08      	cmp	r2, #8
 8001092:	d117      	bne.n	80010c4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001094:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001098:	a806      	add	r0, sp, #24
 800109a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800109c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800109e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010a2:	d50c      	bpl.n	80010be <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010a4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010a6:	480a      	ldr	r0, [pc, #40]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010a8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010ac:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010ae:	aa06      	add	r2, sp, #24
 80010b0:	4413      	add	r3, r2
 80010b2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010b6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80010ba:	b007      	add	sp, #28
 80010bc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_RCC_GetSysClockFreq+0x74>)
 80010c0:	4350      	muls	r0, r2
 80010c2:	e7fa      	b.n	80010ba <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80010c6:	e7f8      	b.n	80010ba <HAL_RCC_GetSysClockFreq+0x5a>
 80010c8:	08002374 	.word	0x08002374
 80010cc:	40021000 	.word	0x40021000
 80010d0:	007a1200 	.word	0x007a1200
 80010d4:	003d0900 	.word	0x003d0900

080010d8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010d8:	4a54      	ldr	r2, [pc, #336]	; (800122c <HAL_RCC_ClockConfig+0x154>)
{
 80010da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010de:	6813      	ldr	r3, [r2, #0]
{
 80010e0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	428b      	cmp	r3, r1
{
 80010e8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010ea:	d32a      	bcc.n	8001142 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ec:	6829      	ldr	r1, [r5, #0]
 80010ee:	078c      	lsls	r4, r1, #30
 80010f0:	d434      	bmi.n	800115c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f2:	07ca      	lsls	r2, r1, #31
 80010f4:	d447      	bmi.n	8001186 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80010f6:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_RCC_ClockConfig+0x154>)
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	429e      	cmp	r6, r3
 8001100:	f0c0 8082 	bcc.w	8001208 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001104:	682a      	ldr	r2, [r5, #0]
 8001106:	4c4a      	ldr	r4, [pc, #296]	; (8001230 <HAL_RCC_ClockConfig+0x158>)
 8001108:	f012 0f04 	tst.w	r2, #4
 800110c:	f040 8087 	bne.w	800121e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001110:	0713      	lsls	r3, r2, #28
 8001112:	d506      	bpl.n	8001122 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001114:	6863      	ldr	r3, [r4, #4]
 8001116:	692a      	ldr	r2, [r5, #16]
 8001118:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800111c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001120:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001122:	f7ff ff9d 	bl	8001060 <HAL_RCC_GetSysClockFreq>
 8001126:	6863      	ldr	r3, [r4, #4]
 8001128:	4a42      	ldr	r2, [pc, #264]	; (8001234 <HAL_RCC_ClockConfig+0x15c>)
 800112a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	40d8      	lsrs	r0, r3
 8001132:	4b41      	ldr	r3, [pc, #260]	; (8001238 <HAL_RCC_ClockConfig+0x160>)
 8001134:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff f808 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 800113c:	2000      	movs	r0, #0
}
 800113e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001142:	6813      	ldr	r3, [r2, #0]
 8001144:	f023 0307 	bic.w	r3, r3, #7
 8001148:	430b      	orrs	r3, r1
 800114a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800114c:	6813      	ldr	r3, [r2, #0]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	4299      	cmp	r1, r3
 8001154:	d0ca      	beq.n	80010ec <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001156:	2001      	movs	r0, #1
 8001158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800115c:	4b34      	ldr	r3, [pc, #208]	; (8001230 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001162:	bf1e      	ittt	ne
 8001164:	685a      	ldrne	r2, [r3, #4]
 8001166:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800116a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800116e:	bf42      	ittt	mi
 8001170:	685a      	ldrmi	r2, [r3, #4]
 8001172:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001176:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	68a8      	ldr	r0, [r5, #8]
 800117c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001180:	4302      	orrs	r2, r0
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	e7b5      	b.n	80010f2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001186:	686a      	ldr	r2, [r5, #4]
 8001188:	4c29      	ldr	r4, [pc, #164]	; (8001230 <HAL_RCC_ClockConfig+0x158>)
 800118a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118e:	d11c      	bne.n	80011ca <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001190:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	d0df      	beq.n	8001156 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001196:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001198:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119c:	f023 0303 	bic.w	r3, r3, #3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80011a4:	f7ff f814 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a8:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80011aa:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d114      	bne.n	80011da <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b0:	6863      	ldr	r3, [r4, #4]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d09d      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ba:	f7ff f809 	bl	80001d0 <HAL_GetTick>
 80011be:	1bc0      	subs	r0, r0, r7
 80011c0:	4540      	cmp	r0, r8
 80011c2:	d9f5      	bls.n	80011b0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80011c4:	2003      	movs	r0, #3
 80011c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ca:	2a02      	cmp	r2, #2
 80011cc:	d102      	bne.n	80011d4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011d2:	e7df      	b.n	8001194 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d4:	f013 0f02 	tst.w	r3, #2
 80011d8:	e7dc      	b.n	8001194 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d10f      	bne.n	80011fe <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011de:	6863      	ldr	r3, [r4, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d086      	beq.n	80010f6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e8:	f7fe fff2 	bl	80001d0 <HAL_GetTick>
 80011ec:	1bc0      	subs	r0, r0, r7
 80011ee:	4540      	cmp	r0, r8
 80011f0:	d9f5      	bls.n	80011de <HAL_RCC_ClockConfig+0x106>
 80011f2:	e7e7      	b.n	80011c4 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f4:	f7fe ffec 	bl	80001d0 <HAL_GetTick>
 80011f8:	1bc0      	subs	r0, r0, r7
 80011fa:	4540      	cmp	r0, r8
 80011fc:	d8e2      	bhi.n	80011c4 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011fe:	6863      	ldr	r3, [r4, #4]
 8001200:	f013 0f0c 	tst.w	r3, #12
 8001204:	d1f6      	bne.n	80011f4 <HAL_RCC_ClockConfig+0x11c>
 8001206:	e776      	b.n	80010f6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	f023 0307 	bic.w	r3, r3, #7
 800120e:	4333      	orrs	r3, r6
 8001210:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001212:	6813      	ldr	r3, [r2, #0]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	429e      	cmp	r6, r3
 800121a:	d19c      	bne.n	8001156 <HAL_RCC_ClockConfig+0x7e>
 800121c:	e772      	b.n	8001104 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800121e:	6863      	ldr	r3, [r4, #4]
 8001220:	68e9      	ldr	r1, [r5, #12]
 8001222:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001226:	430b      	orrs	r3, r1
 8001228:	6063      	str	r3, [r4, #4]
 800122a:	e771      	b.n	8001110 <HAL_RCC_ClockConfig+0x38>
 800122c:	40022000 	.word	0x40022000
 8001230:	40021000 	.word	0x40021000
 8001234:	08002394 	.word	0x08002394
 8001238:	20000008 	.word	0x20000008

0800123c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <HAL_RCC_GetPCLK1Freq+0x14>)
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001246:	5cd3      	ldrb	r3, [r2, r3]
 8001248:	4a03      	ldr	r2, [pc, #12]	; (8001258 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800124a:	6810      	ldr	r0, [r2, #0]
}    
 800124c:	40d8      	lsrs	r0, r3
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	080023a4 	.word	0x080023a4
 8001258:	20000008 	.word	0x20000008

0800125c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_RCC_GetPCLK2Freq+0x14>)
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001266:	5cd3      	ldrb	r3, [r2, r3]
 8001268:	4a03      	ldr	r2, [pc, #12]	; (8001278 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800126a:	6810      	ldr	r0, [r2, #0]
} 
 800126c:	40d8      	lsrs	r0, r3
 800126e:	4770      	bx	lr
 8001270:	40021000 	.word	0x40021000
 8001274:	080023a4 	.word	0x080023a4
 8001278:	20000008 	.word	0x20000008

0800127c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800127c:	6803      	ldr	r3, [r0, #0]
{
 800127e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001282:	07d9      	lsls	r1, r3, #31
{
 8001284:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001286:	d520      	bpl.n	80012ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001288:	4c35      	ldr	r4, [pc, #212]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800128a:	69e3      	ldr	r3, [r4, #28]
 800128c:	00da      	lsls	r2, r3, #3
 800128e:	d432      	bmi.n	80012f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001290:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	69e3      	ldr	r3, [r4, #28]
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	61e3      	str	r3, [r4, #28]
 800129a:	69e3      	ldr	r3, [r4, #28]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	4e2f      	ldr	r6, [pc, #188]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80012a6:	6833      	ldr	r3, [r6, #0]
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	d526      	bpl.n	80012fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012ac:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012ae:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80012b2:	d136      	bne.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80012b4:	6a23      	ldr	r3, [r4, #32]
 80012b6:	686a      	ldr	r2, [r5, #4]
 80012b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012bc:	4313      	orrs	r3, r2
 80012be:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012c0:	b11f      	cbz	r7, 80012ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c2:	69e3      	ldr	r3, [r4, #28]
 80012c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80012ca:	6828      	ldr	r0, [r5, #0]
 80012cc:	0783      	lsls	r3, r0, #30
 80012ce:	d506      	bpl.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80012d0:	4a23      	ldr	r2, [pc, #140]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80012d2:	68a9      	ldr	r1, [r5, #8]
 80012d4:	6853      	ldr	r3, [r2, #4]
 80012d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012da:	430b      	orrs	r3, r1
 80012dc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80012de:	f010 0010 	ands.w	r0, r0, #16
 80012e2:	d01b      	beq.n	800131c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012e4:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80012e6:	68e9      	ldr	r1, [r5, #12]
 80012e8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80012ea:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012f0:	430b      	orrs	r3, r1
 80012f2:	6053      	str	r3, [r2, #4]
 80012f4:	e012      	b.n	800131c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80012f6:	2700      	movs	r7, #0
 80012f8:	e7d4      	b.n	80012a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fa:	6833      	ldr	r3, [r6, #0]
 80012fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001300:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001302:	f7fe ff65 	bl	80001d0 <HAL_GetTick>
 8001306:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	6833      	ldr	r3, [r6, #0]
 800130a:	05d8      	lsls	r0, r3, #23
 800130c:	d4ce      	bmi.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130e:	f7fe ff5f 	bl	80001d0 <HAL_GetTick>
 8001312:	eba0 0008 	sub.w	r0, r0, r8
 8001316:	2864      	cmp	r0, #100	; 0x64
 8001318:	d9f6      	bls.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800131a:	2003      	movs	r0, #3
}
 800131c:	b002      	add	sp, #8
 800131e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001322:	686a      	ldr	r2, [r5, #4]
 8001324:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001328:	4293      	cmp	r3, r2
 800132a:	d0c3      	beq.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800132c:	2001      	movs	r0, #1
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001330:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001332:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001334:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001336:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800133a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800133c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800133e:	07d9      	lsls	r1, r3, #31
 8001340:	d5b8      	bpl.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001342:	f7fe ff45 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800134a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134c:	6a23      	ldr	r3, [r4, #32]
 800134e:	079a      	lsls	r2, r3, #30
 8001350:	d4b0      	bmi.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001352:	f7fe ff3d 	bl	80001d0 <HAL_GetTick>
 8001356:	1b80      	subs	r0, r0, r6
 8001358:	4540      	cmp	r0, r8
 800135a:	d9f7      	bls.n	800134c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800135c:	e7dd      	b.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	40007000 	.word	0x40007000
 8001368:	42420440 	.word	0x42420440

0800136c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800136c:	b570      	push	{r4, r5, r6, lr}
 800136e:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001370:	4b35      	ldr	r3, [pc, #212]	; (8001448 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8001372:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001374:	ad02      	add	r5, sp, #8
 8001376:	f103 0610 	add.w	r6, r3, #16
 800137a:	462a      	mov	r2, r5
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	6859      	ldr	r1, [r3, #4]
 8001380:	3308      	adds	r3, #8
 8001382:	c203      	stmia	r2!, {r0, r1}
 8001384:	42b3      	cmp	r3, r6
 8001386:	4615      	mov	r5, r2
 8001388:	d1f7      	bne.n	800137a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800138a:	2301      	movs	r3, #1
 800138c:	f88d 3004 	strb.w	r3, [sp, #4]
 8001390:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001392:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001394:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8001398:	d047      	beq.n	800142a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 800139a:	2c10      	cmp	r4, #16
 800139c:	d017      	beq.n	80013ce <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800139e:	2c01      	cmp	r4, #1
 80013a0:	d14f      	bne.n	8001442 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80013a2:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80013a6:	4a29      	ldr	r2, [pc, #164]	; (800144c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80013a8:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80013aa:	4019      	ands	r1, r3
 80013ac:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80013b0:	d044      	beq.n	800143c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80013b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ba:	d12d      	bne.n	8001418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 80013bc:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80013c0:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80013c2:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 80013c6:	bf08      	it	eq
 80013c8:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 80013ca:	b006      	add	sp, #24
 80013cc:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80013d0:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80013d8:	d0f7      	beq.n	80013ca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013da:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80013de:	a806      	add	r0, sp, #24
 80013e0:	4402      	add	r2, r0
 80013e2:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013e6:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013e8:	bf41      	itttt	mi
 80013ea:	685a      	ldrmi	r2, [r3, #4]
 80013ec:	a906      	addmi	r1, sp, #24
 80013ee:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80013f2:	1852      	addmi	r2, r2, r1
 80013f4:	bf44      	itt	mi
 80013f6:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80013fa:	4a15      	ldrmi	r2, [pc, #84]	; (8001450 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80013fc:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80013fe:	bf4c      	ite	mi
 8001400:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001404:	4a13      	ldrpl	r2, [pc, #76]	; (8001454 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001406:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001408:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800140c:	d4dd      	bmi.n	80013ca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 800140e:	2303      	movs	r3, #3
 8001410:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001412:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001416:	e7d8      	b.n	80013ca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800141c:	d111      	bne.n	8001442 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800141e:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001420:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001424:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001428:	e7cd      	b.n	80013c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800142a:	f7ff ff17 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001436:	3301      	adds	r3, #1
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	e7ea      	b.n	8001412 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 800143c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001440:	e7c3      	b.n	80013ca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8001442:	2000      	movs	r0, #0
 8001444:	e7c1      	b.n	80013ca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8001446:	bf00      	nop
 8001448:	08002384 	.word	0x08002384
 800144c:	40021000 	.word	0x40021000
 8001450:	007a1200 	.word	0x007a1200
 8001454:	003d0900 	.word	0x003d0900

08001458 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001458:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 800145a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	4770      	bx	lr

0800146e <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 800146e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001472:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001474:	2b01      	cmp	r3, #1
 8001476:	f04f 0302 	mov.w	r3, #2
 800147a:	d01c      	beq.n	80014b6 <HAL_TIM_ConfigClockSource+0x48>
 800147c:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 800147e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001482:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001484:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001488:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800148a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800148e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001494:	680a      	ldr	r2, [r1, #0]
 8001496:	2a40      	cmp	r2, #64	; 0x40
 8001498:	d079      	beq.n	800158e <HAL_TIM_ConfigClockSource+0x120>
 800149a:	d819      	bhi.n	80014d0 <HAL_TIM_ConfigClockSource+0x62>
 800149c:	2a10      	cmp	r2, #16
 800149e:	f000 8093 	beq.w	80015c8 <HAL_TIM_ConfigClockSource+0x15a>
 80014a2:	d80a      	bhi.n	80014ba <HAL_TIM_ConfigClockSource+0x4c>
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	f000 8089 	beq.w	80015bc <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014b0:	2300      	movs	r3, #0
 80014b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80014b6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80014b8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80014ba:	2a20      	cmp	r2, #32
 80014bc:	f000 808a 	beq.w	80015d4 <HAL_TIM_ConfigClockSource+0x166>
 80014c0:	2a30      	cmp	r2, #48	; 0x30
 80014c2:	d1f2      	bne.n	80014aa <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80014c4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80014c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80014ca:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80014ce:	e036      	b.n	800153e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80014d0:	2a70      	cmp	r2, #112	; 0x70
 80014d2:	d036      	beq.n	8001542 <HAL_TIM_ConfigClockSource+0xd4>
 80014d4:	d81b      	bhi.n	800150e <HAL_TIM_ConfigClockSource+0xa0>
 80014d6:	2a50      	cmp	r2, #80	; 0x50
 80014d8:	d042      	beq.n	8001560 <HAL_TIM_ConfigClockSource+0xf2>
 80014da:	2a60      	cmp	r2, #96	; 0x60
 80014dc:	d1e5      	bne.n	80014aa <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014de:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80014e0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014e2:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80014e6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014e8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014ea:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80014ec:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80014ee:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80014f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80014f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80014fa:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80014fe:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001500:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001502:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001504:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001508:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800150c:	e017      	b.n	800153e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800150e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001512:	d011      	beq.n	8001538 <HAL_TIM_ConfigClockSource+0xca>
 8001514:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001518:	d1c7      	bne.n	80014aa <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800151a:	688a      	ldr	r2, [r1, #8]
 800151c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800151e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001520:	68c9      	ldr	r1, [r1, #12]
 8001522:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001524:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001528:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800152c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800152e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001536:	e002      	b.n	800153e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	e7b3      	b.n	80014aa <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001542:	688a      	ldr	r2, [r1, #8]
 8001544:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001546:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001548:	68c9      	ldr	r1, [r1, #12]
 800154a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800154c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001550:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001554:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001556:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001558:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800155a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800155e:	e7ee      	b.n	800153e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001560:	684c      	ldr	r4, [r1, #4]
 8001562:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001564:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001566:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001568:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800156c:	f025 0501 	bic.w	r5, r5, #1
 8001570:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001572:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001574:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001576:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800157a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800157e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001580:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001582:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001584:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001588:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800158c:	e7d7      	b.n	800153e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800158e:	684c      	ldr	r4, [r1, #4]
 8001590:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001592:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001594:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001596:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800159a:	f025 0501 	bic.w	r5, r5, #1
 800159e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015a0:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80015a2:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80015a8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80015ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80015ae:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80015b0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80015b6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80015ba:	e7c0      	b.n	800153e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015bc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80015c2:	f042 0207 	orr.w	r2, r2, #7
 80015c6:	e7ba      	b.n	800153e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015c8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80015ce:	f042 0217 	orr.w	r2, r2, #23
 80015d2:	e7b4      	b.n	800153e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015d4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80015da:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80015de:	e7ae      	b.n	800153e <HAL_TIM_ConfigClockSource+0xd0>

080015e0 <HAL_TIM_OC_DelayElapsedCallback>:
 80015e0:	4770      	bx	lr

080015e2 <HAL_TIM_IC_CaptureCallback>:
 80015e2:	4770      	bx	lr

080015e4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80015e4:	4770      	bx	lr

080015e6 <HAL_TIM_TriggerCallback>:
 80015e6:	4770      	bx	lr

080015e8 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015e8:	6803      	ldr	r3, [r0, #0]
{
 80015ea:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015ec:	691a      	ldr	r2, [r3, #16]
{
 80015ee:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015f0:	0791      	lsls	r1, r2, #30
 80015f2:	d50e      	bpl.n	8001612 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	0792      	lsls	r2, r2, #30
 80015f8:	d50b      	bpl.n	8001612 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015fa:	f06f 0202 	mvn.w	r2, #2
 80015fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001600:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001602:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001604:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001606:	079b      	lsls	r3, r3, #30
 8001608:	d077      	beq.n	80016fa <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800160a:	f7ff ffea 	bl	80015e2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800160e:	2300      	movs	r3, #0
 8001610:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	0750      	lsls	r0, r2, #29
 8001618:	d510      	bpl.n	800163c <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	0751      	lsls	r1, r2, #29
 800161e:	d50d      	bpl.n	800163c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001620:	f06f 0204 	mvn.w	r2, #4
 8001624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001626:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001628:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800162a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800162c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001630:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001632:	d068      	beq.n	8001706 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001634:	f7ff ffd5 	bl	80015e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001638:	2300      	movs	r3, #0
 800163a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	0712      	lsls	r2, r2, #28
 8001642:	d50f      	bpl.n	8001664 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	0710      	lsls	r0, r2, #28
 8001648:	d50c      	bpl.n	8001664 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800164a:	f06f 0208 	mvn.w	r2, #8
 800164e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001650:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001652:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001654:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001656:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001658:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800165a:	d05a      	beq.n	8001712 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800165c:	f7ff ffc1 	bl	80015e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001660:	2300      	movs	r3, #0
 8001662:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	06d2      	lsls	r2, r2, #27
 800166a:	d510      	bpl.n	800168e <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	06d0      	lsls	r0, r2, #27
 8001670:	d50d      	bpl.n	800168e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001672:	f06f 0210 	mvn.w	r2, #16
 8001676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001678:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800167a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800167c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800167e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001682:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001684:	d04b      	beq.n	800171e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001686:	f7ff ffac 	bl	80015e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800168a:	2300      	movs	r3, #0
 800168c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	07d1      	lsls	r1, r2, #31
 8001694:	d508      	bpl.n	80016a8 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	07d2      	lsls	r2, r2, #31
 800169a:	d505      	bpl.n	80016a8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800169c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80016a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80016a4:	f000 fac4 	bl	8001c30 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	0610      	lsls	r0, r2, #24
 80016ae:	d508      	bpl.n	80016c2 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	0611      	lsls	r1, r2, #24
 80016b4:	d505      	bpl.n	80016c2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80016ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80016be:	f000 f8aa 	bl	8001816 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	0652      	lsls	r2, r2, #25
 80016c8:	d508      	bpl.n	80016dc <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	0650      	lsls	r0, r2, #25
 80016ce:	d505      	bpl.n	80016dc <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80016d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016d8:	f7ff ff85 	bl	80015e6 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	0691      	lsls	r1, r2, #26
 80016e2:	d522      	bpl.n	800172a <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	0692      	lsls	r2, r2, #26
 80016e8:	d51f      	bpl.n	800172a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016ea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80016ee:	4620      	mov	r0, r4
}
 80016f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80016f6:	f000 b88d 	b.w	8001814 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016fa:	f7ff ff71 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff ff70 	bl	80015e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001704:	e783      	b.n	800160e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001706:	f7ff ff6b 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ff6a 	bl	80015e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001710:	e792      	b.n	8001638 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001712:	f7ff ff65 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff ff64 	bl	80015e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800171c:	e7a0      	b.n	8001660 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800171e:	f7ff ff5f 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff ff5e 	bl	80015e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001728:	e7af      	b.n	800168a <HAL_TIM_IRQHandler+0xa2>
 800172a:	bd10      	pop	{r4, pc}

0800172c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800172c:	4a1a      	ldr	r2, [pc, #104]	; (8001798 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800172e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001730:	4290      	cmp	r0, r2
 8001732:	d00a      	beq.n	800174a <TIM_Base_SetConfig+0x1e>
 8001734:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001738:	d007      	beq.n	800174a <TIM_Base_SetConfig+0x1e>
 800173a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800173e:	4290      	cmp	r0, r2
 8001740:	d003      	beq.n	800174a <TIM_Base_SetConfig+0x1e>
 8001742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001746:	4290      	cmp	r0, r2
 8001748:	d115      	bne.n	8001776 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800174a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800174c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001750:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001752:	4a11      	ldr	r2, [pc, #68]	; (8001798 <TIM_Base_SetConfig+0x6c>)
 8001754:	4290      	cmp	r0, r2
 8001756:	d00a      	beq.n	800176e <TIM_Base_SetConfig+0x42>
 8001758:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800175c:	d007      	beq.n	800176e <TIM_Base_SetConfig+0x42>
 800175e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001762:	4290      	cmp	r0, r2
 8001764:	d003      	beq.n	800176e <TIM_Base_SetConfig+0x42>
 8001766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800176a:	4290      	cmp	r0, r2
 800176c:	d103      	bne.n	8001776 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800176e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001774:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001776:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800177c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800177e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001780:	688b      	ldr	r3, [r1, #8]
 8001782:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001784:	680b      	ldr	r3, [r1, #0]
 8001786:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <TIM_Base_SetConfig+0x6c>)
 800178a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800178c:	bf04      	itt	eq
 800178e:	690b      	ldreq	r3, [r1, #16]
 8001790:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001792:	2301      	movs	r3, #1
 8001794:	6143      	str	r3, [r0, #20]
 8001796:	4770      	bx	lr
 8001798:	40012c00 	.word	0x40012c00

0800179c <HAL_TIM_Base_Init>:
{
 800179c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800179e:	4604      	mov	r4, r0
 80017a0:	b1a0      	cbz	r0, 80017cc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80017a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017aa:	b91b      	cbnz	r3, 80017b4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80017b0:	f000 fc96 	bl	80020e0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80017b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017b6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80017b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017bc:	1d21      	adds	r1, r4, #4
 80017be:	f7ff ffb5 	bl	800172c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017c2:	2301      	movs	r3, #1
  return HAL_OK;
 80017c4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80017c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80017ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017cc:	2001      	movs	r0, #1
}
 80017ce:	bd10      	pop	{r4, pc}

080017d0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80017d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80017d4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	f04f 0302 	mov.w	r3, #2
 80017dc:	d018      	beq.n	8001810 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80017de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017e2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80017e4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017e6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017e8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017ee:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4322      	orrs	r2, r4
 80017f4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017fc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	430a      	orrs	r2, r1
 8001802:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001804:	2301      	movs	r3, #1
 8001806:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800180a:	2300      	movs	r3, #0
 800180c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001810:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001812:	bd10      	pop	{r4, pc}

08001814 <HAL_TIMEx_CommutationCallback>:
 8001814:	4770      	bx	lr

08001816 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001816:	4770      	bx	lr

08001818 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001818:	6803      	ldr	r3, [r0, #0]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001820:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800182a:	2320      	movs	r3, #32
 800182c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001830:	4770      	bx	lr
	...

08001834 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001838:	6805      	ldr	r5, [r0, #0]
 800183a:	68c2      	ldr	r2, [r0, #12]
 800183c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800183e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001840:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001844:	4313      	orrs	r3, r2
 8001846:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001848:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800184a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800184c:	430b      	orrs	r3, r1
 800184e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001850:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001854:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001858:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800185a:	4313      	orrs	r3, r2
 800185c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800185e:	696b      	ldr	r3, [r5, #20]
 8001860:	6982      	ldr	r2, [r0, #24]
 8001862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001866:	4313      	orrs	r3, r2
 8001868:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800186a:	4b40      	ldr	r3, [pc, #256]	; (800196c <UART_SetConfig+0x138>)
{
 800186c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800186e:	429d      	cmp	r5, r3
 8001870:	f04f 0419 	mov.w	r4, #25
 8001874:	d146      	bne.n	8001904 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001876:	f7ff fcf1 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 800187a:	fb04 f300 	mul.w	r3, r4, r0
 800187e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001882:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001886:	00b6      	lsls	r6, r6, #2
 8001888:	fbb3 f3f6 	udiv	r3, r3, r6
 800188c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001890:	011e      	lsls	r6, r3, #4
 8001892:	f7ff fce3 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 8001896:	4360      	muls	r0, r4
 8001898:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	fbb0 f7f3 	udiv	r7, r0, r3
 80018a2:	f7ff fcdb 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 80018a6:	4360      	muls	r0, r4
 80018a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	fbb3 f3f8 	udiv	r3, r3, r8
 80018b6:	fb08 7313 	mls	r3, r8, r3, r7
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	3332      	adds	r3, #50	; 0x32
 80018be:	fbb3 f3f8 	udiv	r3, r3, r8
 80018c2:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80018c6:	f7ff fcc9 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 80018ca:	4360      	muls	r0, r4
 80018cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	fbb0 faf2 	udiv	sl, r0, r2
 80018d6:	f7ff fcc1 	bl	800125c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018da:	4360      	muls	r0, r4
 80018dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e6:	fbb3 f3f8 	udiv	r3, r3, r8
 80018ea:	fb08 a313 	mls	r3, r8, r3, sl
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	3332      	adds	r3, #50	; 0x32
 80018f2:	fbb3 f3f8 	udiv	r3, r3, r8
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	433b      	orrs	r3, r7
 80018fc:	4433      	add	r3, r6
 80018fe:	60ab      	str	r3, [r5, #8]
 8001900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001904:	f7ff fc9a 	bl	800123c <HAL_RCC_GetPCLK1Freq>
 8001908:	fb04 f300 	mul.w	r3, r4, r0
 800190c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001910:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001914:	00b6      	lsls	r6, r6, #2
 8001916:	fbb3 f3f6 	udiv	r3, r3, r6
 800191a:	fbb3 f3f8 	udiv	r3, r3, r8
 800191e:	011e      	lsls	r6, r3, #4
 8001920:	f7ff fc8c 	bl	800123c <HAL_RCC_GetPCLK1Freq>
 8001924:	4360      	muls	r0, r4
 8001926:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001930:	f7ff fc84 	bl	800123c <HAL_RCC_GetPCLK1Freq>
 8001934:	4360      	muls	r0, r4
 8001936:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001940:	fbb3 f3f8 	udiv	r3, r3, r8
 8001944:	fb08 7313 	mls	r3, r8, r3, r7
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	3332      	adds	r3, #50	; 0x32
 800194c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001950:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001954:	f7ff fc72 	bl	800123c <HAL_RCC_GetPCLK1Freq>
 8001958:	4360      	muls	r0, r4
 800195a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	fbb0 faf2 	udiv	sl, r0, r2
 8001964:	f7ff fc6a 	bl	800123c <HAL_RCC_GetPCLK1Freq>
 8001968:	e7b7      	b.n	80018da <UART_SetConfig+0xa6>
 800196a:	bf00      	nop
 800196c:	40013800 	.word	0x40013800

08001970 <HAL_UART_Init>:
{
 8001970:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001972:	4604      	mov	r4, r0
 8001974:	b340      	cbz	r0, 80019c8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001976:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800197a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800197e:	b91b      	cbnz	r3, 8001988 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001980:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001984:	f000 fbca 	bl	800211c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001988:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800198a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800198c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001990:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001992:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001994:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001998:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800199a:	f7ff ff4b 	bl	8001834 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800199e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019b0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019b8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80019ba:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019bc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80019be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80019c2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80019c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019c8:	2001      	movs	r0, #1
}
 80019ca:	bd10      	pop	{r4, pc}

080019cc <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 80019cc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d118      	bne.n	8001a06 <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL) || (Size == 0U)) 
 80019d4:	b1a9      	cbz	r1, 8001a02 <HAL_UART_Transmit_IT+0x36>
 80019d6:	b1a2      	cbz	r2, 8001a02 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 80019d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d012      	beq.n	8001a06 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 80019e0:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 80019e2:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e4:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019e6:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 80019e8:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80019ea:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ec:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019ee:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80019f2:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 80019f4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80019f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019fc:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80019fe:	4618      	mov	r0, r3
 8001a00:	4770      	bx	lr
      return HAL_ERROR;
 8001a02:	2001      	movs	r0, #1
 8001a04:	4770      	bx	lr
    return HAL_BUSY;
 8001a06:	2002      	movs	r0, #2
}
 8001a08:	4770      	bx	lr

08001a0a <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001a0a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001a0e:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001a10:	2b22      	cmp	r3, #34	; 0x22
 8001a12:	d136      	bne.n	8001a82 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a14:	6883      	ldr	r3, [r0, #8]
 8001a16:	6901      	ldr	r1, [r0, #16]
 8001a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a1c:	6802      	ldr	r2, [r0, #0]
 8001a1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a20:	d123      	bne.n	8001a6a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a22:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001a24:	b9e9      	cbnz	r1, 8001a62 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a2a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001a2e:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001a30:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001a32:	3c01      	subs	r4, #1
 8001a34:	b2a4      	uxth	r4, r4
 8001a36:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001a38:	b98c      	cbnz	r4, 8001a5e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001a3a:	6803      	ldr	r3, [r0, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	f022 0220 	bic.w	r2, r2, #32
 8001a42:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a4a:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001a54:	2320      	movs	r3, #32
 8001a56:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001a5a:	f000 fa3b 	bl	8001ed4 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001a5e:	2000      	movs	r0, #0
}
 8001a60:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	f823 2b01 	strh.w	r2, [r3], #1
 8001a68:	e7e1      	b.n	8001a2e <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001a6a:	b921      	cbnz	r1, 8001a76 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a6c:	1c59      	adds	r1, r3, #1
 8001a6e:	6852      	ldr	r2, [r2, #4]
 8001a70:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	e7dc      	b.n	8001a30 <UART_Receive_IT+0x26>
 8001a76:	6852      	ldr	r2, [r2, #4]
 8001a78:	1c59      	adds	r1, r3, #1
 8001a7a:	6281      	str	r1, [r0, #40]	; 0x28
 8001a7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a80:	e7f7      	b.n	8001a72 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001a82:	2002      	movs	r0, #2
 8001a84:	bd10      	pop	{r4, pc}

08001a86 <HAL_UART_ErrorCallback>:
 8001a86:	4770      	bx	lr

08001a88 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a88:	6803      	ldr	r3, [r0, #0]
{
 8001a8a:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a8c:	681a      	ldr	r2, [r3, #0]
{
 8001a8e:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8001a90:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a92:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a94:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001a96:	d107      	bne.n	8001aa8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a98:	0696      	lsls	r6, r2, #26
 8001a9a:	d55a      	bpl.n	8001b52 <HAL_UART_IRQHandler+0xca>
 8001a9c:	068d      	lsls	r5, r1, #26
 8001a9e:	d558      	bpl.n	8001b52 <HAL_UART_IRQHandler+0xca>
}
 8001aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001aa4:	f7ff bfb1 	b.w	8001a0a <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001aa8:	f015 0501 	ands.w	r5, r5, #1
 8001aac:	d102      	bne.n	8001ab4 <HAL_UART_IRQHandler+0x2c>
 8001aae:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001ab2:	d04e      	beq.n	8001b52 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ab4:	07d3      	lsls	r3, r2, #31
 8001ab6:	d505      	bpl.n	8001ac4 <HAL_UART_IRQHandler+0x3c>
 8001ab8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001aba:	bf42      	ittt	mi
 8001abc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001abe:	f043 0301 	orrmi.w	r3, r3, #1
 8001ac2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ac4:	0750      	lsls	r0, r2, #29
 8001ac6:	d504      	bpl.n	8001ad2 <HAL_UART_IRQHandler+0x4a>
 8001ac8:	b11d      	cbz	r5, 8001ad2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001aca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ad2:	0793      	lsls	r3, r2, #30
 8001ad4:	d504      	bpl.n	8001ae0 <HAL_UART_IRQHandler+0x58>
 8001ad6:	b11d      	cbz	r5, 8001ae0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ad8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ae0:	0716      	lsls	r6, r2, #28
 8001ae2:	d504      	bpl.n	8001aee <HAL_UART_IRQHandler+0x66>
 8001ae4:	b11d      	cbz	r5, 8001aee <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ae6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001aee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d066      	beq.n	8001bc2 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001af4:	0695      	lsls	r5, r2, #26
 8001af6:	d504      	bpl.n	8001b02 <HAL_UART_IRQHandler+0x7a>
 8001af8:	0688      	lsls	r0, r1, #26
 8001afa:	d502      	bpl.n	8001b02 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff ff84 	bl	8001a0a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b02:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001b04:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b06:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b0a:	0711      	lsls	r1, r2, #28
 8001b0c:	d402      	bmi.n	8001b14 <HAL_UART_IRQHandler+0x8c>
 8001b0e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001b12:	d01a      	beq.n	8001b4a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001b14:	f7ff fe80 	bl	8001818 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	0652      	lsls	r2, r2, #25
 8001b1e:	d510      	bpl.n	8001b42 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b20:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001b22:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b28:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001b2a:	b150      	cbz	r0, 8001b42 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b2c:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <HAL_UART_IRQHandler+0x13c>)
 8001b2e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b30:	f7fe ff44 	bl	80009bc <HAL_DMA_Abort_IT>
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d044      	beq.n	8001bc2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b38:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b40:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff ff9f 	bl	8001a86 <HAL_UART_ErrorCallback>
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001b4a:	f7ff ff9c 	bl	8001a86 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001b50:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b52:	0616      	lsls	r6, r2, #24
 8001b54:	d527      	bpl.n	8001ba6 <HAL_UART_IRQHandler+0x11e>
 8001b56:	060d      	lsls	r5, r1, #24
 8001b58:	d525      	bpl.n	8001ba6 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001b5a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001b5e:	2a21      	cmp	r2, #33	; 0x21
 8001b60:	d12f      	bne.n	8001bc2 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b62:	68a2      	ldr	r2, [r4, #8]
 8001b64:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001b68:	6a22      	ldr	r2, [r4, #32]
 8001b6a:	d117      	bne.n	8001b9c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001b6c:	8811      	ldrh	r1, [r2, #0]
 8001b6e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001b72:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001b74:	6921      	ldr	r1, [r4, #16]
 8001b76:	b979      	cbnz	r1, 8001b98 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001b78:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001b7a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001b7c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001b7e:	3a01      	subs	r2, #1
 8001b80:	b292      	uxth	r2, r2
 8001b82:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001b84:	b9ea      	cbnz	r2, 8001bc2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b8c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001b98:	3201      	adds	r2, #1
 8001b9a:	e7ee      	b.n	8001b7a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001b9c:	1c51      	adds	r1, r2, #1
 8001b9e:	6221      	str	r1, [r4, #32]
 8001ba0:	7812      	ldrb	r2, [r2, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	e7ea      	b.n	8001b7c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001ba6:	0650      	lsls	r0, r2, #25
 8001ba8:	d50b      	bpl.n	8001bc2 <HAL_UART_IRQHandler+0x13a>
 8001baa:	064a      	lsls	r2, r1, #25
 8001bac:	d509      	bpl.n	8001bc2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001bae:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001bb0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bb6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001bb8:	2320      	movs	r3, #32
 8001bba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001bbe:	f000 f983 	bl	8001ec8 <HAL_UART_TxCpltCallback>
 8001bc2:	bd70      	pop	{r4, r5, r6, pc}
 8001bc4:	08001bc9 	.word	0x08001bc9

08001bc8 <UART_DMAAbortOnError>:
{
 8001bc8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001bca:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bcc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001bce:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001bd0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001bd2:	f7ff ff58 	bl	8001a86 <HAL_UART_ErrorCallback>
 8001bd6:	bd08      	pop	{r3, pc}

08001bd8 <Read_Humidity_sensor>:

}

void Read_Humidity_sensor(IrrigationSystem_t *sensor){
	uint8_t counter = 0;
	if (ADCReady == SET){
 8001bd8:	4b01      	ldr	r3, [pc, #4]	; (8001be0 <Read_Humidity_sensor+0x8>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000028 	.word	0x20000028

08001be4 <Humidity_Sensor_init>:
		  //RTU_package_IrrigationSystem(&pkg, (uint16_t)values, &huart1);
	  }
	}
}

void Humidity_Sensor_init(ADC_HandleTypeDef* hadc){
 8001be4:	b510      	push	{r4, lr}
 8001be6:	4604      	mov	r4, r0
	HAL_ADCEx_Calibration_Start(hadc);
 8001be8:	f7fe fda8 	bl	800073c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t *)adcDmaBuffer, ADC_DMA_BUFFER_SIZE);
 8001bec:	4620      	mov	r0, r4
}
 8001bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_Start_DMA(hadc, (uint32_t *)adcDmaBuffer, ADC_DMA_BUFFER_SIZE);
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	4901      	ldr	r1, [pc, #4]	; (8001bfc <Humidity_Sensor_init+0x18>)
 8001bf6:	f7fe bc71 	b.w	80004dc <HAL_ADC_Start_DMA>
 8001bfa:	bf00      	nop
 8001bfc:	20000030 	.word	0x20000030

08001c00 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
	adcDmaBufferIndex=0;
 8001c00:	2200      	movs	r2, #0
 8001c02:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <HAL_ADC_ConvHalfCpltCallback+0x10>)
 8001c04:	701a      	strb	r2, [r3, #0]
	ADCReady= SET;
 8001c06:	2201      	movs	r2, #1
 8001c08:	4b02      	ldr	r3, [pc, #8]	; (8001c14 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000029 	.word	0x20000029
 8001c14:	20000028 	.word	0x20000028

08001c18 <HAL_ADC_ConvCpltCallback>:
	//HAL_GPIO_TogglePin(DEBUG_3_GPIO_Port, DEBUG_3_Pin);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
	adcDmaBufferIndex = (ADC_DMA_BUFFER_SIZE / 2);
 8001c18:	2204      	movs	r2, #4
 8001c1a:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <HAL_ADC_ConvCpltCallback+0x10>)
 8001c1c:	701a      	strb	r2, [r3, #0]
	ADCReady= SET;
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4b02      	ldr	r3, [pc, #8]	; (8001c2c <HAL_ADC_ConvCpltCallback+0x14>)
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000029 	.word	0x20000029
 8001c2c:	20000028 	.word	0x20000028

08001c30 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	HAL_GPIO_TogglePin(DEBUG_1_GPIO_Port, DEBUG_1_Pin);
 8001c30:	2110      	movs	r1, #16
 8001c32:	4801      	ldr	r0, [pc, #4]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x8>)
 8001c34:	f7ff b883 	b.w	8000d3e <HAL_GPIO_TogglePin>
 8001c38:	40010800 	.word	0x40010800

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1)
	{
		HAL_GPIO_TogglePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin);
 8001c3e:	4c05      	ldr	r4, [pc, #20]	; (8001c54 <Error_Handler+0x18>)
 8001c40:	4620      	mov	r0, r4
 8001c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c46:	f7ff f87a 	bl	8000d3e <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8001c4a:	2032      	movs	r0, #50	; 0x32
 8001c4c:	f7fe fac6 	bl	80001dc <HAL_Delay>
 8001c50:	e7f6      	b.n	8001c40 <Error_Handler+0x4>
 8001c52:	bf00      	nop
 8001c54:	40011000 	.word	0x40011000

08001c58 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c58:	2228      	movs	r2, #40	; 0x28
{
 8001c5a:	b510      	push	{r4, lr}
 8001c5c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c5e:	2100      	movs	r1, #0
 8001c60:	eb0d 0002 	add.w	r0, sp, r2
 8001c64:	f000 fb72 	bl	800234c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c68:	2214      	movs	r2, #20
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	eb0d 0002 	add.w	r0, sp, r2
 8001c70:	f000 fb6c 	bl	800234c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c74:	2210      	movs	r2, #16
 8001c76:	2100      	movs	r1, #0
 8001c78:	a801      	add	r0, sp, #4
 8001c7a:	f000 fb67 	bl	800234c <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c82:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c84:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c86:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c88:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c8a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c90:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c92:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c94:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c96:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c98:	f7ff f856 	bl	8000d48 <HAL_RCC_OscConfig>
 8001c9c:	b108      	cbz	r0, 8001ca2 <SystemClock_Config+0x4a>
    Error_Handler();
 8001c9e:	f7ff ffcd 	bl	8001c3c <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca2:	230f      	movs	r3, #15
 8001ca4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001caa:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cac:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cae:	4621      	mov	r1, r4
 8001cb0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb2:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb4:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cb6:	f7ff fa0f 	bl	80010d8 <HAL_RCC_ClockConfig>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d1ef      	bne.n	8001c9e <SystemClock_Config+0x46>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cc4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001cc6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc8:	f7ff fad8 	bl	800127c <HAL_RCCEx_PeriphCLKConfig>
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d1e6      	bne.n	8001c9e <SystemClock_Config+0x46>
}
 8001cd0:	b014      	add	sp, #80	; 0x50
 8001cd2:	bd10      	pop	{r4, pc}

08001cd4 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	2510      	movs	r5, #16
{
 8001cd6:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd8:	4c63      	ldr	r4, [pc, #396]	; (8001e68 <main+0x194>)
{
 8001cda:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8001cdc:	f7fe fa5a 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001ce0:	f7ff ffba 	bl	8001c58 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	462a      	mov	r2, r5
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	a80a      	add	r0, sp, #40	; 0x28
 8001cea:	f000 fb2f 	bl	800234c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cee:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_SET);
 8001cf0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	432b      	orrs	r3, r5
 8001cf4:	61a3      	str	r3, [r4, #24]
 8001cf6:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_SET);
 8001cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfc:	402b      	ands	r3, r5
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d02:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_SET);
 8001d04:	4859      	ldr	r0, [pc, #356]	; (8001e6c <main+0x198>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d06:	f043 0320 	orr.w	r3, r3, #32
 8001d0a:	61a3      	str	r3, [r4, #24]
 8001d0c:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0e:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	9303      	str	r3, [sp, #12]
 8001d16:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d1a:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	61a3      	str	r3, [r4, #24]
 8001d22:	69a3      	ldr	r3, [r4, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	9304      	str	r3, [sp, #16]
 8001d2a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(INTERNAL_LED_GPIO_Port, INTERNAL_LED_Pin, GPIO_PIN_SET);
 8001d2c:	f7ff f802 	bl	8000d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DEBUG_0_Pin|DEBUG_1_Pin|DEBUG_2_Pin, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2138      	movs	r1, #56	; 0x38
 8001d34:	484e      	ldr	r0, [pc, #312]	; (8001e70 <main+0x19c>)
 8001d36:	f7fe fffd 	bl	8000d34 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = INTERNAL_LED_Pin;
 8001d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(INTERNAL_LED_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	a90a      	add	r1, sp, #40	; 0x28
 8001d40:	484a      	ldr	r0, [pc, #296]	; (8001e6c <main+0x198>)
  GPIO_InitStruct.Pin = INTERNAL_LED_Pin;
 8001d42:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d44:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(INTERNAL_LED_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f7fe ff13 	bl	8000b74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DEBUG_0_Pin|DEBUG_1_Pin|DEBUG_2_Pin;
 8001d4e:	2338      	movs	r3, #56	; 0x38
 8001d50:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d52:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	a90a      	add	r1, sp, #40	; 0x28
 8001d56:	4846      	ldr	r0, [pc, #280]	; (8001e70 <main+0x19c>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d58:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f7fe ff09 	bl	8000b74 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d64:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d66:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d68:	433b      	orrs	r3, r7
 8001d6a:	6163      	str	r3, [r4, #20]
 8001d6c:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d6e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d70:	403b      	ands	r3, r7
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d76:	f7fe fd5d 	bl	8000834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d7a:	200b      	movs	r0, #11
 8001d7c:	f7fe fd8e 	bl	800089c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	200e      	movs	r0, #14
 8001d84:	4611      	mov	r1, r2
 8001d86:	f7fe fd55 	bl	8000834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001d8a:	200e      	movs	r0, #14
 8001d8c:	f7fe fd86 	bl	800089c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	200f      	movs	r0, #15
 8001d94:	4611      	mov	r1, r2
 8001d96:	f7fe fd4d 	bl	8000834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f7fe fd7e 	bl	800089c <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da0:	462a      	mov	r2, r5
 8001da2:	2100      	movs	r1, #0
 8001da4:	a80a      	add	r0, sp, #40	; 0x28
 8001da6:	f000 fad1 	bl	800234c <memset>
  htim3.Instance = TIM3;
 8001daa:	4e32      	ldr	r6, [pc, #200]	; (8001e74 <main+0x1a0>)
 8001dac:	4a32      	ldr	r2, [pc, #200]	; (8001e78 <main+0x1a4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dae:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 16;
 8001db0:	e886 0024 	stmia.w	r6, {r2, r5}
  htim3.Init.Period = 45000;
 8001db4:	f64a 72c8 	movw	r2, #45000	; 0xafc8
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001db8:	4630      	mov	r0, r6
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dba:	9305      	str	r3, [sp, #20]
 8001dbc:	9306      	str	r3, [sp, #24]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	60b3      	str	r3, [r6, #8]
  htim3.Init.Period = 45000;
 8001dc0:	60f2      	str	r2, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	6133      	str	r3, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc4:	61b3      	str	r3, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dc6:	f7ff fce9 	bl	800179c <HAL_TIM_Base_Init>
 8001dca:	b108      	cbz	r0, 8001dd0 <main+0xfc>
    Error_Handler();
 8001dcc:	f7ff ff36 	bl	8001c3c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dd4:	a90a      	add	r1, sp, #40	; 0x28
 8001dd6:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd8:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dda:	f7ff fb48 	bl	800146e <HAL_TIM_ConfigClockSource>
 8001dde:	2800      	cmp	r0, #0
 8001de0:	d1f4      	bne.n	8001dcc <main+0xf8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001de2:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de6:	a905      	add	r1, sp, #20
 8001de8:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dea:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dec:	f7ff fcf0 	bl	80017d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d1eb      	bne.n	8001dcc <main+0xf8>
  hadc1.Instance = ADC1;
 8001df4:	4d21      	ldr	r5, [pc, #132]	; (8001e7c <main+0x1a8>)
 8001df6:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <main+0x1ac>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001df8:	9007      	str	r0, [sp, #28]
  hadc1.Instance = ADC1;
 8001dfa:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001dfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e00:	9008      	str	r0, [sp, #32]
 8001e02:	9009      	str	r0, [sp, #36]	; 0x24
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e04:	60a8      	str	r0, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e06:	60e8      	str	r0, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e08:	6168      	str	r0, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e0a:	6068      	str	r0, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e0c:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001e0e:	61eb      	str	r3, [r5, #28]
  hadc1.Init.NbrOfConversion = 1;
 8001e10:	612f      	str	r7, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e12:	f7fe fc13 	bl	800063c <HAL_ADC_Init>
 8001e16:	2800      	cmp	r0, #0
 8001e18:	d1d8      	bne.n	8001dcc <main+0xf8>
  sConfig.Channel = ADC_CHANNEL_0;
 8001e1a:	9007      	str	r0, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e1c:	a907      	add	r1, sp, #28
 8001e1e:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e20:	9708      	str	r7, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001e22:	9709      	str	r7, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e24:	f7fe fa9e 	bl	8000364 <HAL_ADC_ConfigChannel>
 8001e28:	2800      	cmp	r0, #0
 8001e2a:	d1cf      	bne.n	8001dcc <main+0xf8>
  huart1.Init.BaudRate = 9600;
 8001e2c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8001e30:	4c14      	ldr	r4, [pc, #80]	; (8001e84 <main+0x1b0>)
  huart1.Init.BaudRate = 9600;
 8001e32:	4a15      	ldr	r2, [pc, #84]	; (8001e88 <main+0x1b4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e34:	60a0      	str	r0, [r4, #8]
  huart1.Init.BaudRate = 9600;
 8001e36:	e884 000c 	stmia.w	r4, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e3a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e3c:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e3e:	6120      	str	r0, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e40:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e42:	61e0      	str	r0, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e44:	4620      	mov	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e46:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e48:	f7ff fd92 	bl	8001970 <HAL_UART_Init>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d1bd      	bne.n	8001dcc <main+0xf8>
  HAL_TIM_Base_Start_IT(&htim3);
 8001e50:	4630      	mov	r0, r6
 8001e52:	f7ff fb01 	bl	8001458 <HAL_TIM_Base_Start_IT>
  Humidity_Sensor_init(&hadc1);
 8001e56:	4628      	mov	r0, r5
 8001e58:	f7ff fec4 	bl	8001be4 <Humidity_Sensor_init>
	  RTU_package_IrrigationSystem(&pkg, &IS, &huart1);
 8001e5c:	4622      	mov	r2, r4
 8001e5e:	a907      	add	r1, sp, #28
 8001e60:	a80a      	add	r0, sp, #40	; 0x28
 8001e62:	f000 f845 	bl	8001ef0 <RTU_package_IrrigationSystem>
 8001e66:	e7f9      	b.n	8001e5c <main+0x188>
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40011000 	.word	0x40011000
 8001e70:	40010800 	.word	0x40010800
 8001e74:	20000040 	.word	0x20000040
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	200000c4 	.word	0x200000c4
 8001e80:	40012400 	.word	0x40012400
 8001e84:	20000138 	.word	0x20000138
 8001e88:	40013800 	.word	0x40013800

08001e8c <modbus_write>:
	}
}

void modbus_write(package_t *pkg, uint16_t sensor_reg, uint16_t data)
{
	pkg->data = swap_bytes(data);
 8001e8c:	ba52      	rev16	r2, r2
	pkg->reg = swap_bytes(sensor_reg);
 8001e8e:	ba49      	rev16	r1, r1
	pkg->data = swap_bytes(data);
 8001e90:	8082      	strh	r2, [r0, #4]
	pkg->reg = swap_bytes(sensor_reg);
 8001e92:	8041      	strh	r1, [r0, #2]
 8001e94:	4770      	bx	lr

08001e96 <CRC16_2>:
}

uint16_t CRC16_2(uint8_t *buf, int len)
{
 8001e96:	b530      	push	{r4, r5, lr}
	uint32_t crc = 0xFFFF;
	int i;

	for (i = 0; i < len; i++)
 8001e98:	4602      	mov	r2, r0
	uint32_t crc = 0xFFFF;
 8001e9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	{
	crc ^= (uint16_t)buf[i]; // XOR byte into least sig. byte of crc
		for (int i = 8; i != 0; i--) { // Loop over each bit
			if ((crc & 0x0001) != 0) { // If the LSB is set
				crc >>= 1; // Shift right and XOR 0xA001
				crc ^= 0xA001;
 8001e9e:	f24a 0501 	movw	r5, #40961	; 0xa001
	for (i = 0; i < len; i++)
 8001ea2:	1a14      	subs	r4, r2, r0
 8001ea4:	42a1      	cmp	r1, r4
 8001ea6:	dc01      	bgt.n	8001eac <CRC16_2+0x16>
			else // Else LSB is not set
				crc >>= 1; // Just shift right
		}
	}
	return crc;
}
 8001ea8:	b298      	uxth	r0, r3
 8001eaa:	bd30      	pop	{r4, r5, pc}
	crc ^= (uint16_t)buf[i]; // XOR byte into least sig. byte of crc
 8001eac:	f812 4b01 	ldrb.w	r4, [r2], #1
 8001eb0:	4063      	eors	r3, r4
 8001eb2:	2408      	movs	r4, #8
			if ((crc & 0x0001) != 0) { // If the LSB is set
 8001eb4:	f013 0f01 	tst.w	r3, #1
 8001eb8:	ea4f 0353 	mov.w	r3, r3, lsr #1
				crc ^= 0xA001;
 8001ebc:	bf18      	it	ne
 8001ebe:	406b      	eorne	r3, r5
		for (int i = 8; i != 0; i--) { // Loop over each bit
 8001ec0:	3c01      	subs	r4, #1
 8001ec2:	d1f7      	bne.n	8001eb4 <CRC16_2+0x1e>
 8001ec4:	e7ed      	b.n	8001ea2 <CRC16_2+0xc>
	...

08001ec8 <HAL_UART_TxCpltCallback>:
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4b01      	ldr	r3, [pc, #4]	; (8001ed0 <HAL_UART_TxCpltCallback+0x8>)
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	4770      	bx	lr
 8001ed0:	2000002a 	.word	0x2000002a

08001ed4 <HAL_UART_RxCpltCallback>:
	UartReady = SET;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	UartReady = SET;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4b01      	ldr	r3, [pc, #4]	; (8001edc <HAL_UART_RxCpltCallback+0x8>)
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	4770      	bx	lr
 8001edc:	2000002a 	.word	0x2000002a

08001ee0 <Wait_transmit_finish>:
void Reset_huart_flag(){
	UartReady = RESET;
}

void Wait_transmit_finish(){
	while (UartReady != SET) {}
 8001ee0:	4a02      	ldr	r2, [pc, #8]	; (8001eec <Wait_transmit_finish+0xc>)
 8001ee2:	7813      	ldrb	r3, [r2, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d1fc      	bne.n	8001ee2 <Wait_transmit_finish+0x2>
}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	2000002a 	.word	0x2000002a

08001ef0 <RTU_package_IrrigationSystem>:
{
 8001ef0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	pkg->addr = MODBUS_ADDRESS;
 8001ef4:	2315      	movs	r3, #21
	pkg->cmd = MODBUS_WRITE;
 8001ef6:	2701      	movs	r7, #1
{
 8001ef8:	4604      	mov	r4, r0
 8001efa:	460d      	mov	r5, r1
	pkg->addr = MODBUS_ADDRESS;
 8001efc:	7003      	strb	r3, [r0, #0]
	pkg->cmd = MODBUS_WRITE;
 8001efe:	7047      	strb	r7, [r0, #1]
	Read_Humidity_sensor(sensors);  //depois mudar para generico
 8001f00:	4608      	mov	r0, r1
{
 8001f02:	4690      	mov	r8, r2
	Read_Humidity_sensor(sensors);  //depois mudar para generico
 8001f04:	f7ff fe68 	bl	8001bd8 <Read_Humidity_sensor>
		modbus_write(pkg, sensor_reg, sensors->humidity);
 8001f08:	882a      	ldrh	r2, [r5, #0]
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	f7ff ffbd 	bl	8001e8c <modbus_write>
		pkg->crc = CRC16_2(pkg->package, 6);
 8001f12:	4620      	mov	r0, r4
 8001f14:	2106      	movs	r1, #6
 8001f16:	f7ff ffbe 	bl	8001e96 <CRC16_2>
	UartReady = RESET;
 8001f1a:	2600      	movs	r6, #0
		aux = pkg->reg >> 8;
 8001f1c:	46a2      	mov	sl, r4
		pkg->data = swap_bytes(pkg->data);
 8001f1e:	88a2      	ldrh	r2, [r4, #4]
	UartReady = RESET;
 8001f20:	4d32      	ldr	r5, [pc, #200]	; (8001fec <RTU_package_IrrigationSystem+0xfc>)
	data_ = data <<8;
 8001f22:	0213      	lsls	r3, r2, #8
	new_data |= data_;
 8001f24:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		pkg->reg = swap_bytes(pkg->reg);
 8001f28:	8862      	ldrh	r2, [r4, #2]
		pkg->data = swap_bytes(pkg->data);
 8001f2a:	80a3      	strh	r3, [r4, #4]
	data_ = data <<8;
 8001f2c:	0213      	lsls	r3, r2, #8
	new_data |= data_;
 8001f2e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		pkg->reg = swap_bytes(pkg->reg);
 8001f32:	8063      	strh	r3, [r4, #2]
		HAL_UART_Transmit_IT(huart, &pkg->addr, sizeof(uint8_t));
 8001f34:	4621      	mov	r1, r4
		pkg->crc = CRC16_2(pkg->package, 6);
 8001f36:	80e0      	strh	r0, [r4, #6]
		HAL_UART_Transmit_IT(huart, &pkg->addr, sizeof(uint8_t));
 8001f38:	463a      	mov	r2, r7
 8001f3a:	4640      	mov	r0, r8
	UartReady = RESET;
 8001f3c:	702e      	strb	r6, [r5, #0]
		HAL_UART_Transmit_IT(huart, &pkg->addr, sizeof(uint8_t));
 8001f3e:	f7ff fd45 	bl	80019cc <HAL_UART_Transmit_IT>
		Wait_transmit_finish();
 8001f42:	f7ff ffcd 	bl	8001ee0 <Wait_transmit_finish>
		HAL_UART_Transmit_IT(huart, &pkg->cmd, sizeof(uint8_t));
 8001f46:	19e1      	adds	r1, r4, r7
 8001f48:	463a      	mov	r2, r7
 8001f4a:	4640      	mov	r0, r8
	UartReady = RESET;
 8001f4c:	702e      	strb	r6, [r5, #0]
		HAL_UART_Transmit_IT(huart, &pkg->cmd, sizeof(uint8_t));
 8001f4e:	f7ff fd3d 	bl	80019cc <HAL_UART_Transmit_IT>
		Wait_transmit_finish();
 8001f52:	f7ff ffc5 	bl	8001ee0 <Wait_transmit_finish>
		aux = pkg->reg >> 8;
 8001f56:	f83a 3f02 	ldrh.w	r3, [sl, #2]!
 8001f5a:	f10d 0908 	add.w	r9, sp, #8
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f809 3d01 	strb.w	r3, [r9, #-1]!
		HAL_UART_Transmit_IT(huart, &aux, sizeof(uint8_t));
 8001f64:	463a      	mov	r2, r7
 8001f66:	4649      	mov	r1, r9
 8001f68:	4640      	mov	r0, r8
	UartReady = RESET;
 8001f6a:	702e      	strb	r6, [r5, #0]
		HAL_UART_Transmit_IT(huart, &aux, sizeof(uint8_t));
 8001f6c:	f7ff fd2e 	bl	80019cc <HAL_UART_Transmit_IT>
		Wait_transmit_finish();
 8001f70:	f7ff ffb6 	bl	8001ee0 <Wait_transmit_finish>
		HAL_UART_Transmit_IT(huart, (uint8_t*)(&pkg->reg), sizeof(uint8_t));
 8001f74:	4651      	mov	r1, sl
		aux = pkg->data >> 8;
 8001f76:	46a2      	mov	sl, r4
		HAL_UART_Transmit_IT(huart, (uint8_t*)(&pkg->reg), sizeof(uint8_t));
 8001f78:	463a      	mov	r2, r7
 8001f7a:	4640      	mov	r0, r8
	UartReady = RESET;
 8001f7c:	702e      	strb	r6, [r5, #0]
		HAL_UART_Transmit_IT(huart, (uint8_t*)(&pkg->reg), sizeof(uint8_t));
 8001f7e:	f7ff fd25 	bl	80019cc <HAL_UART_Transmit_IT>
		Wait_transmit_finish();
 8001f82:	f7ff ffad 	bl	8001ee0 <Wait_transmit_finish>
		aux = pkg->data >> 8;
 8001f86:	f83a 3f04 	ldrh.w	r3, [sl, #4]!
		HAL_UART_Transmit_IT(huart, &aux, sizeof(uint8_t));
 8001f8a:	463a      	mov	r2, r7
		aux = pkg->data >> 8;
 8001f8c:	0a1b      	lsrs	r3, r3, #8
		HAL_UART_Transmit_IT(huart, &aux, sizeof(uint8_t));
 8001f8e:	4649      	mov	r1, r9
 8001f90:	4640      	mov	r0, r8
		aux = pkg->data >> 8;
 8001f92:	f88d 3007 	strb.w	r3, [sp, #7]
	UartReady = RESET;
 8001f96:	702e      	strb	r6, [r5, #0]
		HAL_UART_Transmit_IT(huart, &aux, sizeof(uint8_t));
 8001f98:	f7ff fd18 	bl	80019cc <HAL_UART_Transmit_IT>
		Wait_transmit_finish();
 8001f9c:	f7ff ffa0 	bl	8001ee0 <Wait_transmit_finish>
		HAL_UART_Transmit_IT(huart, (uint8_t*)(&pkg->data), sizeof(uint8_t));
 8001fa0:	463a      	mov	r2, r7
 8001fa2:	4651      	mov	r1, sl
 8001fa4:	4640      	mov	r0, r8
	UartReady = RESET;
 8001fa6:	702e      	strb	r6, [r5, #0]
		HAL_UART_Transmit_IT(huart, (uint8_t*)(&pkg->data), sizeof(uint8_t));
 8001fa8:	f7ff fd10 	bl	80019cc <HAL_UART_Transmit_IT>
		Wait_transmit_finish();
 8001fac:	f7ff ff98 	bl	8001ee0 <Wait_transmit_finish>
		aux = pkg->crc >> 8;
 8001fb0:	f834 3f06 	ldrh.w	r3, [r4, #6]!
		HAL_UART_Transmit_IT(huart, &aux, sizeof(uint8_t));
 8001fb4:	463a      	mov	r2, r7
		aux = pkg->crc >> 8;
 8001fb6:	0a1b      	lsrs	r3, r3, #8
		HAL_UART_Transmit_IT(huart, &aux, sizeof(uint8_t));
 8001fb8:	4649      	mov	r1, r9
 8001fba:	4640      	mov	r0, r8
		aux = pkg->crc >> 8;
 8001fbc:	f88d 3007 	strb.w	r3, [sp, #7]
	UartReady = RESET;
 8001fc0:	702e      	strb	r6, [r5, #0]
		HAL_UART_Transmit_IT(huart, &aux, sizeof(uint8_t));
 8001fc2:	f7ff fd03 	bl	80019cc <HAL_UART_Transmit_IT>
		Wait_transmit_finish();
 8001fc6:	f7ff ff8b 	bl	8001ee0 <Wait_transmit_finish>
		HAL_UART_Transmit_IT(huart, (uint8_t*)(&pkg->crc), sizeof(uint8_t));
 8001fca:	463a      	mov	r2, r7
 8001fcc:	4621      	mov	r1, r4
 8001fce:	4640      	mov	r0, r8
	UartReady = RESET;
 8001fd0:	702e      	strb	r6, [r5, #0]
		HAL_UART_Transmit_IT(huart, (uint8_t*)(&pkg->crc), sizeof(uint8_t));
 8001fd2:	f7ff fcfb 	bl	80019cc <HAL_UART_Transmit_IT>
		Wait_transmit_finish();
 8001fd6:	f7ff ff83 	bl	8001ee0 <Wait_transmit_finish>
		HAL_Delay(500);
 8001fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	UartReady = RESET;
 8001fde:	702e      	strb	r6, [r5, #0]
		HAL_Delay(500);
 8001fe0:	f7fe f8fc 	bl	80001dc <HAL_Delay>
}
 8001fe4:	b002      	add	sp, #8
 8001fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fea:	bf00      	nop
 8001fec:	2000002a 	.word	0x2000002a

08001ff0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_MspInit+0x3c>)
{
 8001ff2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	619a      	str	r2, [r3, #24]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	f002 0201 	and.w	r2, r2, #1
 8002002:	9200      	str	r2, [sp, #0]
 8002004:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800200c:	61da      	str	r2, [r3, #28]
 800200e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002010:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800201a:	6853      	ldr	r3, [r2, #4]
 800201c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002026:	b002      	add	sp, #8
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	40010000 	.word	0x40010000

08002034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002034:	b530      	push	{r4, r5, lr}
 8002036:	4605      	mov	r5, r0
 8002038:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203a:	2210      	movs	r2, #16
 800203c:	2100      	movs	r1, #0
 800203e:	a802      	add	r0, sp, #8
 8002040:	f000 f984 	bl	800234c <memset>
  if(hadc->Instance==ADC1)
 8002044:	682a      	ldr	r2, [r5, #0]
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_ADC_MspInit+0x9c>)
 8002048:	429a      	cmp	r2, r3
 800204a:	d13e      	bne.n	80020ca <HAL_ADC_MspInit+0x96>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800204c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002050:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	4820      	ldr	r0, [pc, #128]	; (80020d4 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002058:	619a      	str	r2, [r3, #24]
 800205a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800205e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002062:	9200      	str	r2, [sp, #0]
 8002064:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002068:	4c1b      	ldr	r4, [pc, #108]	; (80020d8 <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	f042 0204 	orr.w	r2, r2, #4
 800206e:	619a      	str	r2, [r3, #24]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800207a:	2301      	movs	r3, #1
 800207c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207e:	2303      	movs	r3, #3
 8002080:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f7fe fd77 	bl	8000b74 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_ADC_MspInit+0xa8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002088:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 800208a:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208c:	2300      	movs	r3, #0
 800208e:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002090:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800209a:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800209c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a0:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020a2:	2320      	movs	r3, #32
 80020a4:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80020a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020aa:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020ac:	f7fe fc18 	bl	80008e0 <HAL_DMA_Init>
 80020b0:	b108      	cbz	r0, 80020b6 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 80020b2:	f7ff fdc3 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020b8:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020ba:	2012      	movs	r0, #18
 80020bc:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020be:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020c0:	f7fe fbb8 	bl	8000834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020c4:	2012      	movs	r0, #18
 80020c6:	f7fe fbe9 	bl	800089c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020ca:	b007      	add	sp, #28
 80020cc:	bd30      	pop	{r4, r5, pc}
 80020ce:	bf00      	nop
 80020d0:	40012400 	.word	0x40012400
 80020d4:	40010800 	.word	0x40010800
 80020d8:	20000178 	.word	0x20000178
 80020dc:	40020008 	.word	0x40020008

080020e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e0:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_TIM_Base_MspInit+0x38>)
 80020e4:	6802      	ldr	r2, [r0, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d112      	bne.n	8002110 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ea:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80020ee:	69da      	ldr	r2, [r3, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020f0:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020f2:	f042 0202 	orr.w	r2, r2, #2
 80020f6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020f8:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020fa:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020fc:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002106:	f7fe fb95 	bl	8000834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800210a:	201d      	movs	r0, #29
 800210c:	f7fe fbc6 	bl	800089c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002110:	b003      	add	sp, #12
 8002112:	f85d fb04 	ldr.w	pc, [sp], #4
 8002116:	bf00      	nop
 8002118:	40000400 	.word	0x40000400

0800211c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800211c:	b570      	push	{r4, r5, r6, lr}
 800211e:	4606      	mov	r6, r0
 8002120:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	2210      	movs	r2, #16
 8002124:	2100      	movs	r1, #0
 8002126:	a802      	add	r0, sp, #8
 8002128:	f000 f910 	bl	800234c <memset>
  if(huart->Instance==USART1)
 800212c:	6832      	ldr	r2, [r6, #0]
 800212e:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <HAL_UART_MspInit+0xdc>)
 8002130:	429a      	cmp	r2, r3
 8002132:	d15e      	bne.n	80021f2 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002134:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002138:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800213c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002140:	619a      	str	r2, [r3, #24]
 8002142:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	482d      	ldr	r0, [pc, #180]	; (80021fc <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002146:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800214a:	9200      	str	r2, [sp, #0]
 800214c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002150:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	f042 0204 	orr.w	r2, r2, #4
 8002156:	619a      	str	r2, [r3, #24]
 8002158:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800215a:	4c29      	ldr	r4, [pc, #164]	; (8002200 <HAL_UART_MspInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002168:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f7fe fcff 	bl	8000b74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002176:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	4820      	ldr	r0, [pc, #128]	; (80021fc <HAL_UART_MspInit+0xe0>)
 800217c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800217e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002180:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	f7fe fcf6 	bl	8000b74 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002188:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_UART_MspInit+0xe8>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800218a:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218c:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	60e3      	str	r3, [r4, #12]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002198:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219a:	6125      	str	r5, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800219c:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800219e:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80021a0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021a2:	f7fe fb9d 	bl	80008e0 <HAL_DMA_Init>
 80021a6:	b108      	cbz	r0, 80021ac <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 80021a8:	f7ff fd48 	bl	8001c3c <Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ac:	f04f 0c10 	mov.w	ip, #16
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_UART_MspInit+0xec>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80021b2:	6374      	str	r4, [r6, #52]	; 0x34
 80021b4:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80021b6:	4c15      	ldr	r4, [pc, #84]	; (800220c <HAL_UART_MspInit+0xf0>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021b8:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ba:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c2:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c4:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80021c6:	2320      	movs	r3, #32
 80021c8:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80021ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021ce:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021d0:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80021d2:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021d4:	f7fe fb84 	bl	80008e0 <HAL_DMA_Init>
 80021d8:	b108      	cbz	r0, 80021de <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80021da:	f7ff fd2f 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80021e2:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021e4:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80021e6:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021e8:	f7fe fb24 	bl	8000834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ec:	2025      	movs	r0, #37	; 0x25
 80021ee:	f7fe fb55 	bl	800089c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021f2:	b006      	add	sp, #24
 80021f4:	bd70      	pop	{r4, r5, r6, pc}
 80021f6:	bf00      	nop
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40010800 	.word	0x40010800
 8002200:	200000f4 	.word	0x200000f4
 8002204:	40020058 	.word	0x40020058
 8002208:	40020044 	.word	0x40020044
 800220c:	20000080 	.word	0x20000080

08002210 <NMI_Handler>:
 8002210:	4770      	bx	lr

08002212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002212:	e7fe      	b.n	8002212 <HardFault_Handler>

08002214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002214:	e7fe      	b.n	8002214 <MemManage_Handler>

08002216 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002216:	e7fe      	b.n	8002216 <BusFault_Handler>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	e7fe      	b.n	8002218 <UsageFault_Handler>

0800221a <SVC_Handler>:
 800221a:	4770      	bx	lr

0800221c <DebugMon_Handler>:
 800221c:	4770      	bx	lr

0800221e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221e:	4770      	bx	lr

08002220 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002220:	f7fd bfca 	b.w	80001b8 <HAL_IncTick>

08002224 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002224:	4801      	ldr	r0, [pc, #4]	; (800222c <DMA1_Channel1_IRQHandler+0x8>)
 8002226:	f7fe bc11 	b.w	8000a4c <HAL_DMA_IRQHandler>
 800222a:	bf00      	nop
 800222c:	20000178 	.word	0x20000178

08002230 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002230:	4801      	ldr	r0, [pc, #4]	; (8002238 <DMA1_Channel4_IRQHandler+0x8>)
 8002232:	f7fe bc0b 	b.w	8000a4c <HAL_DMA_IRQHandler>
 8002236:	bf00      	nop
 8002238:	20000080 	.word	0x20000080

0800223c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800223c:	4801      	ldr	r0, [pc, #4]	; (8002244 <DMA1_Channel5_IRQHandler+0x8>)
 800223e:	f7fe bc05 	b.w	8000a4c <HAL_DMA_IRQHandler>
 8002242:	bf00      	nop
 8002244:	200000f4 	.word	0x200000f4

08002248 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002248:	4801      	ldr	r0, [pc, #4]	; (8002250 <ADC1_2_IRQHandler+0x8>)
 800224a:	f7fe b806 	b.w	800025a <HAL_ADC_IRQHandler>
 800224e:	bf00      	nop
 8002250:	200000c4 	.word	0x200000c4

08002254 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002254:	4801      	ldr	r0, [pc, #4]	; (800225c <TIM3_IRQHandler+0x8>)
 8002256:	f7ff b9c7 	b.w	80015e8 <HAL_TIM_IRQHandler>
 800225a:	bf00      	nop
 800225c:	20000040 	.word	0x20000040

08002260 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002260:	4801      	ldr	r0, [pc, #4]	; (8002268 <USART1_IRQHandler+0x8>)
 8002262:	f7ff bc11 	b.w	8001a88 <HAL_UART_IRQHandler>
 8002266:	bf00      	nop
 8002268:	20000138 	.word	0x20000138

0800226c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <SystemInit+0x40>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <SystemInit+0x44>)
 800227a:	400a      	ands	r2, r1
 800227c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002284:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002288:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002290:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002298:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800229a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800229e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <SystemInit+0x48>)
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	f8ff0000 	.word	0xf8ff0000
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80022b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80022ba:	e003      	b.n	80022c4 <LoopCopyDataInit>

080022bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80022be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80022c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80022c2:	3104      	adds	r1, #4

080022c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022c4:	480a      	ldr	r0, [pc, #40]	; (80022f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80022cc:	d3f6      	bcc.n	80022bc <CopyDataInit>
  ldr r2, =_sbss
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80022d0:	e002      	b.n	80022d8 <LoopFillZerobss>

080022d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80022d4:	f842 3b04 	str.w	r3, [r2], #4

080022d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80022da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80022dc:	d3f9      	bcc.n	80022d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022de:	f7ff ffc5 	bl	800226c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022e2:	f000 f80f 	bl	8002304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022e6:	f7ff fcf5 	bl	8001cd4 <main>
  bx lr
 80022ea:	4770      	bx	lr
  ldr r3, =_sidata
 80022ec:	080023b4 	.word	0x080023b4
  ldr r0, =_sdata
 80022f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80022f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80022f8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80022fc:	200001bc 	.word	0x200001bc

08002300 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <CAN1_RX1_IRQHandler>
	...

08002304 <__libc_init_array>:
 8002304:	b570      	push	{r4, r5, r6, lr}
 8002306:	2500      	movs	r5, #0
 8002308:	4e0c      	ldr	r6, [pc, #48]	; (800233c <__libc_init_array+0x38>)
 800230a:	4c0d      	ldr	r4, [pc, #52]	; (8002340 <__libc_init_array+0x3c>)
 800230c:	1ba4      	subs	r4, r4, r6
 800230e:	10a4      	asrs	r4, r4, #2
 8002310:	42a5      	cmp	r5, r4
 8002312:	d109      	bne.n	8002328 <__libc_init_array+0x24>
 8002314:	f000 f822 	bl	800235c <_init>
 8002318:	2500      	movs	r5, #0
 800231a:	4e0a      	ldr	r6, [pc, #40]	; (8002344 <__libc_init_array+0x40>)
 800231c:	4c0a      	ldr	r4, [pc, #40]	; (8002348 <__libc_init_array+0x44>)
 800231e:	1ba4      	subs	r4, r4, r6
 8002320:	10a4      	asrs	r4, r4, #2
 8002322:	42a5      	cmp	r5, r4
 8002324:	d105      	bne.n	8002332 <__libc_init_array+0x2e>
 8002326:	bd70      	pop	{r4, r5, r6, pc}
 8002328:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800232c:	4798      	blx	r3
 800232e:	3501      	adds	r5, #1
 8002330:	e7ee      	b.n	8002310 <__libc_init_array+0xc>
 8002332:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002336:	4798      	blx	r3
 8002338:	3501      	adds	r5, #1
 800233a:	e7f2      	b.n	8002322 <__libc_init_array+0x1e>
 800233c:	080023ac 	.word	0x080023ac
 8002340:	080023ac 	.word	0x080023ac
 8002344:	080023ac 	.word	0x080023ac
 8002348:	080023b0 	.word	0x080023b0

0800234c <memset>:
 800234c:	4603      	mov	r3, r0
 800234e:	4402      	add	r2, r0
 8002350:	4293      	cmp	r3, r2
 8002352:	d100      	bne.n	8002356 <memset+0xa>
 8002354:	4770      	bx	lr
 8002356:	f803 1b01 	strb.w	r1, [r3], #1
 800235a:	e7f9      	b.n	8002350 <memset+0x4>

0800235c <_init>:
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	bf00      	nop
 8002360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002362:	bc08      	pop	{r3}
 8002364:	469e      	mov	lr, r3
 8002366:	4770      	bx	lr

08002368 <_fini>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	bf00      	nop
 800236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236e:	bc08      	pop	{r3}
 8002370:	469e      	mov	lr, r3
 8002372:	4770      	bx	lr
